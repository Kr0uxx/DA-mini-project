{"request": [{"role": "user", "text": "Аккаунт разработчика"}], "response": "Разработчикам\nДля управления приложениями предусмотрена система управления контентом – RuStore Консоль.\nВход в систему осуществляется с помощью единого аккаунта VK ID.\nДоступ разработчика к системе RuStore Консоль осуществляется через web-интерфейс."}
{"request": [{"role": "user", "text": "Регистрация разработчиков"}], "response": "Вы можете создать аккаунт юридического или физического лица в системе RuStore Консоль.\nРегистрация юридических лиц/индивидуальных предпринимателей предназначена для:\nкоммерческих и промышленных предприятий;\nгосударственных компаний;\nпрофессиональных разработчиков.\nПри выборе регистрации юридических лиц/индивидуальных предпринимателей необходимо подписать форму регистрации квалифицированной электронной подписью.\nРегистрация физических лиц предназначена для использования в личных целях. Аккаунт подойдет для:\nстудентов;\nлюбителей;\nполупрофессиональных разработчиков.\nПри выборе регистрации физических лиц необходимо пройти удаленную верификацию личности.\nЕсли в вашем аккаунте перестала работать авторизация через Google, войдите заново другим способом: по номеру телефона, VK, Яндекс или ГосУслуги. Укажите тот же номер телефона, который использовали для авторизации ранее."}
{"request": [{"role": "user", "text": "Как узнать VK ID"}], "response": "VK ID — это единый аккаунт для сервисов VK. Если у вас есть профиль в социальной сети ВКонтакте, он автоматически стал и вашим VK ID.\nЕсли вы не хотите привязывать аккаунт в системе RuStore Консоль к личному профилю ВКонтакте или у вас его нет, вы можете создать новый профиль и использовать его как корпоративный.\nКак найти VK ID:\nВойдите в свой профиль ВКонтакте.\nПерейдите в раздел «Настройки».\nНайдите блок «Адрес страницы».\nНажмите «Изменить», чтобы увидеть номер страницы, если ранее вы присвоили буквенно-цифровой адрес.\nЭто и есть ваш VK ID.\nЕсли в вашем аккаунте перестала работать авторизация через Google, войдите заново другим способом: по номеру телефона, VK, Яндекс или ГосУслуги. Укажите тот же номер телефона, который использовали для авторизации ранее."}
{"request": [{"role": "user", "text": "Добавление дополнительных разработчиков"}], "response": "Сотрудник компании, VK ID которого был указан при регистрации, является владельцем Компании. У каждой Компании может быть только один владелец.\nВладелец компании может зарегистрировать только одну Компанию, поэтому рекомендуется создать единую корпоративную VK ID (физического лица) учетную запись для управления приложениями.\nВладелец компании может создавать приложения и назначать/добавлять разработчиков по их VK ID для каждого из приложений."}
{"request": [{"role": "user", "text": "Как добавить дополнительного разработчика"}], "response": "Разработчик, которого необходимо добавить к управлению приложением, авторизуется под своим VK ID (физического лица) в системеRuStore Консоль (производить действия после авторизации в системеRuStore Консоль на этом этапе не нужно).\nРазработчик передает свой VK ID владельцу компании в формате «12345678». Как узнать VK ID?\nВладелец компании добавляет VK ID этого разработчика к соответствующему приложению.\nПосле добавления разработчику будет открыт доступ к соответствующему приложению. Он может изменять описание и данные о своих приложениях и создавать, подготавливать и публиковать новые версии приложений.\nУ разработчика нет возможности регистрации Компаний, создания новых приложений или добавления других разработчиков в приложения."}
{"request": [{"role": "user", "text": "Добавление пользователей и выбор роли"}], "response": "Вы можете установить ограничение возможных операций с приложениями для сотрудников и назначить им определённые роли. Это позволит чётко настроить варианты взаимодействия с приложениями. Например, разрешить сотруднику только публиковать приложения или совершать возвраты.\nДобавить и назначить роли можно только для тех пользователей, которые хотя бы раз авторизовались в RuStore Консоли."}
{"request": [{"role": "user", "text": "Как добавить пользователей"}], "response": "1. Выберите приложение.\n2. Перейдите на вкладку «Доступы» в меню слева.\n3. Нажмите кнопку «Пригласить пользователя» в верхней части экрана.\n4. Укажите VK ID пользователя. Как узнать VK ID?\n5. Выберите роль пользователя. Можно выбрать только один вариант из списка.\n6. Нажмите кнопку «Пригласить»."}
{"request": [{"role": "user", "text": "Как изменить владельца приложения"}], "response": "Для передачи приложения другому паблишеру владелец приложения должен направить запрос в службу поддержки support@rustore.ru. В письме нужно указать VK ID текущего и нового владельца приложения, а также прикрепить скриншот из RuStore Консоли, подтверждающий владение профилем.\nМы рекомендуем направить запрос в поддержку минимум за 3 рабочих дня до окончания месяца. Так, приложение перейдёт к новому владельцу уже с 1-го числа следующего месяца.\nПередача приложений с монетизацией и предоставление отчетов новому владельцу осуществляется с 1-го числа месяца, следующего за обращением в поддержку."}
{"request": [{"role": "user", "text": "Как редактировать доступы"}], "response": "1. Выберите пользователя.\n2. Нажмите на  рядом с ним.\n3. Выберите новую роль.\n4. Нажмите кнопку «Сохранить»."}
{"request": [{"role": "user", "text": "Как удалить пользователя"}], "response": "1. Выберите пользователя.\n2. Нажмите на  рядом с ним.\n3. Нажмите кнопку «Удалить».\nБудьте внимательны, отменить удаление не получится и придётся заново добавлять пользователя в случае ошибочного удаления."}
{"request": [{"role": "user", "text": "Какие роли можно выбрать"}], "response": "В RuStore возможны пять ролей пользователей:\nвладелец компании;\nразработчик;\nфинансовый менеджер;\nрелиз-менеджер;\nспециалист поддержки."}
{"request": [{"role": "user", "text": "Публикация и проверка приложений"}], "response": "После регистрации в системе RuStore Консоль вы можете опубликовать свое приложение."}
{"request": [{"role": "user", "text": "Сколько стоит выложить приложение в RuStore"}], "response": "В RuStore нет оплаты публикации приложений. Вы можете бесплатно публиковать свои приложения как бесплатные, так и платные."}
{"request": [{"role": "user", "text": "Декларация разрешений"}], "response": "Безопасность пользователей является ключевым критерием для RuStore. Для обеспечения безопасности данных пользователя RuStore проводит проверку всех запрашиваемых разрешений (permissions) каждого приложения. Кроме того, в системе реализована функция для получения информации о типах пользовательских данных, которые собирает и передаёт загружаемое приложение.\nДекларация разрешений и предоставление информации о запрашиваемых данных повышает прозрачность и помогает магазину и пользователям понять, как обрабатываются и для каких целей используются пользовательские данные."}
{"request": [{"role": "user", "text": "Как декларировать разрешения"}], "response": "Для обеспечения безопасности пользователей в консоли RuStore был реализован новый блок “Безопасность данных пользователя”, в котором разработчику необходимо заполнить информацию о категориях и типах данных, а также предоставить информацию о чувствительных разрешениях. Блок состоит из двух разделов “Чувствительные разрешения” и “Категории и типы данных”.\nРаздел “Чувствительные разрешения” отображается только в том случае, если в приложении обнаружены чувствительные разрешения, и содержит список таких разрешений.\nЕсли в приложении обнаружены чувствительные разрешения, в поле “Обоснование” необходимо указать, для чего требуется каждое из них.\nВ разделе “Категории и типы данных” разработчику необходимо отметить все типы данных, доступ к которым запрашивает приложение.\nПодробная информация о доступных типах данных указана в разделе Категории и типы данных.\nРаздел “Категории и типы данных” отображается для всех версий приложения, независимо от того, какой тип разрешения используется.\nПосле заполнения всей информации в карточке версии приложения и отправки ее на модерацию команда RuStore выполнит проверку приложения.\nПеред отправкой приложения на модерацию обязательно проверьте приложение на соответствие требованиям к приложениям.\nВ случае, если в приложении используются чувствительные разрешения, будет проведена расширенная проверка приложения.\nЕсли приложение не соответствует правилам использования разрешений, команда RuStore вправе обратиться к разработчикам за разъяснениями, отправив письмо с результатами проверки владельцу аккаунта и на контактный адрес электронной почты в аккаунте разработчика.\nЕсли приложение соответствует Правилам программы для разработчиков, заявка будет одобрена, и приложение станет доступно для публикации в RuStore."}
{"request": [{"role": "user", "text": "Категории и типы данных"}], "response": "Категории и типы данных — это сведения, которые помогут пользователям понять, каким образом приложение использует их данные и как в нём обеспечивается безопасность.\nИнформация о том, какие типы данных приложение может собирать и передавать третьим лицам, будет доступна пользователям на странице мобильного приложения RuStore.\nПри загрузке или обновлении приложения необходимо указать все типы пользовательских данных, которые собирает и передаёт приложение, а именно:\nвсе типы пользовательских данных, которые собирает и/или передает приложение;\nвсе пользовательские данные, отправляемые с устройства с помощью библиотек или SDК, которые есть в приложении, независимо от того, кому передается информация — разработчику или третьему лицу;\nвсе пользовательские данные, которые передаются с сервера разработчика третьему лицу или стороннему приложению на том же устройстве."}
{"request": [{"role": "user", "text": "Типы разрешений"}], "response": "Используемые разрешения проходят первичную проверку после добавления приложения в систему RuStore Консоль.\nДекларации подлежат все разрешения, отличные от категории Normal («Безопасные»), а именно Dangerous («Опасные»), Special («Специальные»), Signature («Требующие особой подписи»).\nПриложения, использующие разрешения из категории Not for use by third-party applications («Запрещенные»), будут автоматически отклонены при загрузке приложения.\nРазрешения типов Dangerous, Special и Signature относятся к категории чувствительных разрешений.\nСписок запрещенных и чувствительных разрешений представлен в таблице ниже.\nУровни разрешений\nТребования RuStore, предъявляемые к разрешениям приложения, не являются более строгими по сравнению с правилами Google Play и сохраняют их терминологию для удобства разработчиков.\nАктуальная информация по категориям разрешений доступна по ссылке:\nhttps://developer.android.com/reference/android/Manifest.permission"}
{"request": [{"role": "user", "text": "Публикация приложений"}], "response": "Опубликуйте свое приложение, чтобы пользователи могли скачать его из RuStore.\nОткройте Консоль RuStore.\nПерейдите на вкладку «Приложения».\nНажмите «Добавить приложение».\nВ открывшемся окне введите название приложения.\nНажмите «Добавить».\nВыберите добавленное приложение.\nНажмите «Загрузить версию».\nШаги по загрузке версии будут отличаться в зависимости от типа приложения: «Универсальный» (подходит для телефона, планшета и ТВ) или «Только для ТВ». Если вы выбрали «Универсальный» тип приложения, дополнительно будет предложено заполнить информацию для ТВ-версии. Если ваше приложение подходит только для ТВ, следуйте инструкции на странице Добавление приложения для устройства ТВ.\nВ случае, если создано универсальное приложение и загружена версия для мобильных устройств и ТВ, последующие версии могут быть только универсальными. Если необходимо добавить новую версию, которая подходит только под ТВ, создайте раздельные версии приложения: универсальное + ТВ.\nЗагрузка версии приложения\nRuStore поддерживает загрузку приложений в форматах APK и ААВ.\nТребования к загрузке файла APK\nПри загрузке первой версии убедитесь, что:\nразмер файла не превышает 2,5 ГБ;\nфайл подписан цифровым сертификатом;\nимя пакета уникально;\nсборка проверена и настроена.\nПри загрузке второй и последующих версий проверьте, что:\nразмер файла не превышает 2,5 ГБ;\nфайл подписан цифровым сертификатом;\nподпись соответствует предыдущей;\nпакет соответствует предыдущему;\nсборка проверена и настроена;\nномер новой версии приложения больше предыдущего.\nТребования к загрузке файла ААВ\nподписи приложения должны быть добавлены отдельно перед загрузкой .aab файла.\nразмер файла приложения не должен превышать 500 MB;\nимя пакета должно быть уникально;\nсборка должна быть проверена и настроена."}
{"request": [{"role": "user", "text": "К СВЕДЕНИЮ"}], "response": "Как работать с ключами подписи APK-файлов?\nЗагрузка приложений в формате ААВ\nРаздел «Что нового?»\nРаздел «Что нового?» заполняется при загрузке новой версии приложения. Расскажите здесь о главных обновлениях, какие функции появились или какие баги были исправлены. При загрузке универсальной версии приложения также вы можете добавить историю изменений для ТВ-версии.\nБезопасность данных пользователя\nЗаполните информацию о категориях и типах данных, доступ к которым запрашивает приложение, а также предоставьте информацию о чувствительных разрешениях. Подробнее читайте в разделе Как декларировать разрешения.\nИнформация о приложении\nУкажите наименование приложения:\nне более 30 символов;\nнаименование приложения должно быть уникально.\nВыберите категорию из предложенного списка. Как это сделать?\nВыберите возрастное ограничение из предложенного списка. Как правильно выбрать возрастное ограничение?\nВведите краткое описание приложения для мобильных устройств и для ТВ-версии (до 80 символов).\nВведите подробное описание приложения (до 4000 символов, при формировании необходимо учесть возможность пользователя сворачивать описание до 2000 символов).\nМедиафайлы для каталога\nИконка\nПеретащите иконку приложения с рабочего стола или из папки на компьютере в область «Иконка для мобильных устройств». Также вы можете добавить отдельную иконку для ТВ-версии приложения, нажав «Добавить иконку для ТВ»."}
{"request": [{"role": "user", "text": "Если оставить это поле пустым, то иконка мобильных устройств будет также отображаться для ТВ-версии."}], "response": "Требования к иконке\nразрешение изображения и размер файла: 512х512 px, до 3 МБ;\nдопустимый формат: .png или .jpg.\nСкриншоты\nВы можете добавить скриншоты только для телефона. В этом случае одинаковые скриншоты будут отображаться на всех типах устройств: телефонах и планшетах.\nВы также можете загрузить отдельные скриншоты для планшетов. В этом случае скриншоты для телефона будут отображаться на устройствах с экраном меньше 7 дюймов, а скриншоты для планшетов появятся в карточке приложения на устройствах с экраном от 7 дюймов и более."}
{"request": [{"role": "user", "text": "Обязательно загрузите скриншоты для мобильной версии приложения."}], "response": "Если файл вашего приложения в формате APK или AAB подходит для ТВ, загрузите также скриншоты и баннер для ТВ."}
{"request": [{"role": "user", "text": "Как добавить скриншоты?"}], "response": "Требования к изображениям\nразмер файла: не более 3 МБ для телефонов и не более 5 МБ для планшетов;\nдопустимый формат формат: .png или .jpg;\nмаксимальное разрешение: 2160х3840 px для мобильной версии; 1920х1080 px для ТВ-версии;\nрекомендуемое соотношение сторон — 16:9;\nесли ширина или высота меньше рекомендованной — скриншот растягивается до пропорций 16:9;\nесли ширина или высота больше рекомендованной — скриншот обрезается до пропорций 16:9.\nДобавление ссылки на видео\nВы можете также добавить ссылку на видео с публичным доступом. Видео по ссылке будет доступно в карточке приложения для телефонов и планшетов.\nТребования к видео\nвидео должно относиться непосредственно к приложению (например, вы можете загрузить трейлер, запись геймплея и т. п.);\nвидео не должно содержать недопустимого контента (см. Требования к приложениям);\nвидео должно быть публичным;\nмаксимальная продолжительность видеоролика: 1 мин;\nможно добавить только одно видео.\nСоздание черновика версии и отправка на модерацию\nНажмите «Отправить на модерацию», если вы полностью заполнили форму загрузки версии приложения. Приложение отправляется на модерацию."}
{"request": [{"role": "user", "text": "Перед отправкой приложения на модерацию обязательно проверьте приложение на соответствие требованиям к приложениям."}], "response": "Выберите «Сохранить как черновик», чтобы создать черновик и вернуться к редактированию версии приложения позже.\nЧтобы работать с черновиками, необходимо соблюдать следующие условия:\nсоздание, редактирование и удаление черновика доступно для роли владельца аккаунта, релиз-менеджера и разработчика;\nвы можете создать только 1 черновик версии приложения;\nчерновик в RuStore Консоли можно сохранить только без APK или AAB файла. Удалите файл из формы, чтобы сохранить версию как черновик, или сразу отправьте версию приложения на на модерацию.\nРедактирование черновика\nЧтобы продолжить заполнение формы загрузки приложения, выполните следующие шаги:\nПерейдите на вкладку «Приложения» и выберите раздел «Версии».\nНажмите «Редактировать» рядом с черновиком, чтобы перейти в форму загрузки приложения.\nЕсли необходимо удалить черновик, перейдите в меню действий и выберите «Удалить».\nУсловия добавления разработчика\nЧтобы добавить разработчика, который будет вести операционную деятельность с конкретным приложением, необходимо соблюдение условий:\nразработчик авторизовался в Консоли RuStore;\nразработчик передал VK ID сотруднику, загрузившему приложение (в цифровом формате)."}
{"request": [{"role": "user", "text": "Как загрузить новую версию приложения"}], "response": "После публикации вы можете загружать новые версии приложения.\n1. Откройте систему RuStore Консоль.\n2. Перейдите на вкладку «Приложения».\n3. Выберите приложение.\n4. Нажмите «Загрузить версию».\n5. Заполните параметры приложения.\n6. Перетащите скриншоты с рабочего стола или из папки на компьютере в область «Скриншоты приложения для телефона» или «Скриншоты для планшета».\n7. Для платных приложений введите стоимость.\n8. Выберите параметры публикации приложения. Как настроить публикацию?\n9. Нажмите «Отправить на модерацию»."}
{"request": [{"role": "user", "text": "Загрузка APK-файлов"}], "response": "При загрузке файла APK в RuStore Консоль укажите ту же подпись, что и в других магазинах приложений. Тогда пользователи смогут обновить установленные на устройстве приложения, для которых в RuStore доступна последняя версия.\nВы также можете загрузить несколько APK-файлов. Например, если ваше приложение есть в Google Play и подписано там, но для Rustore вы поменяли подпись. Загрузите файлы с разными подписями, чтобы исключить ошибки обновления у пользователей. Как работать с ключами подписи APK-файлов?\nЕсли вы хотите указать новый ключ подписи, который прежде не использовался в других магазинах, его нужно заменить везде. Как обновить подпись в Google Play?\nДля замены ключа подписи в RuStore обратитесь в службу поддержки support@rustore.ru.\nЕсли ключи подписи не совпадают, пользователи не могут обновить приложение, установленное через другой магазин.\nПомимо APK-файлов в RuStore Консоль теперь доступна загрузка файлов в формате ААВ. Подробнее."}
{"request": [{"role": "user", "text": "Отправка на модерацию"}], "response": "Перед отправкой приложения на модерацию обязательно проверьте приложение на соответствие требованиям к приложениям.\nЕсли при публикации новой версии приложения вы меняете стоимость, напишите об изменениях в данной версии приложения в блоке «Описание».\nПриложение отправляется на модерацию."}
{"request": [{"role": "user", "text": "Комиссия в платных приложениях"}], "response": "Комиссия в платных приложениях\nКомиссия RuStore составляет 15% от дохода разработчика.\nАктуальные условия по размеру комиссии можно посмотреть в разделе «Соглашение RuStore о распространении программных продуктов»."}
{"request": [{"role": "user", "text": "Автоматическая и ручная публикация приложения"}], "response": "Вы можете настроить автоматическую/мгновенную публикацию версии приложения, пока она находится на модерации.\nНастройка мгновенной публикации доступна при первой публикации версии и при обновлении ранее загруженной версии."}
{"request": [{"role": "user", "text": "Автоматическая/мгновенная публикация"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите версию приложения в статусе «Ожидает модерацию».\nВ меню выберите «Автоматически» и нажмите «Применить».\nПосле прохождения модерации версия приложения опубликуется в RuStore в течение одного часа. На вашу почту придет уведомление о статусе версии приложения.\nВы можете изменить публикацию с автоматической на ручную, пока модерация не пройдена."}
{"request": [{"role": "user", "text": "Публикация вручную"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите версию приложения в статусе «Ожидает модерацию».\nВ меню выберите «Ручная».\nПосле прохождения модерации статус версии приложения изменится на «Готова к публикации».\n5. Нажмите «Опубликовать».\nВы можете снять текущую версию с публикации. Нажмите на кнопку меню и выберите «Снять с публикации». Опубликованная версия будет деактивирована, активируется последняя активная версия.\nЕсли пользователи установили новую версию приложения до деактивации, то они продолжат ей пользоваться."}
{"request": [{"role": "user", "text": "Отложенная публикация приложения"}], "response": "Вы можете отложить публикацию версии приложения на определенную дату и время.\nНастройка отложенной публикации доступна только при обновлении ранее загруженной версии."}
{"request": [{"role": "user", "text": "Управление публикацией при загрузке новой версии приложения"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите приложение.\nЗагрузите новую версию приложения. Как это сделать?\nПерейдите к блоку «Публикация версии».\nВыберите «В выбранную дату и время».\nУстановите дату и время публикации.\nНажмите «Отправить на модерацию».\nПриложение отправляется на модерацию."}
{"request": [{"role": "user", "text": "Управление публикацией во время модерации"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите версию приложения в статусе «Ожидает модерации».\nНажмите на поле с выбранным ранее типом публикации.\nВыберите «В выбранную дату и время».\nУстановите дату и время публикации.\nПосле прохождения модерации версия приложения автоматически опубликуется в RuStore в указанную дату и время. На вашу почту придет уведомление о статусе версии приложения."}
{"request": [{"role": "user", "text": "Управление публикацией после модерации"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите версию приложения в статусе «Готова к публикации».\nВ меню нажмите «Редактировать описание». Откроется страница публикации версии приложения.\nПерейдите к блоку «Публикация версии».\nВыберите «В выбранную дату и время».\nНажмите «Отправить на модерацию».\nВерсия приложения автоматически опубликуется в RuStore в указанную дату и время. На вашу почту придет уведомление о статусе версии приложения.\nВы можете изменить настройки отложенной публикации, если:\nприложение находится на модерации;\nприложение прошло модерацию, но еще не наступил срок публикации."}
{"request": [{"role": "user", "text": "Поэтапная публикация приложений"}], "response": "Вы можете опубликовать приложение поэтапно на определенный процент пользователей. Это поможет оперативно отслеживать ошибки, проблемы или негативные отзывы на конкретную версию приложения.\nПоэтапная публикация доступна только при обновлении ранее загруженной версии.\nДля выбора процента пользователей доступны значения:\n5%.\n10%.\n25%.\n50%.\n75%.\n100%.\nМожно менять значение процентов в большую сторону. Завершение поэтапной публикации — 100% пользователей."}
{"request": [{"role": "user", "text": "Управление публикацией при загрузке новой версии"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите приложение.\nЗагрузите новую версию приложения. Как это сделать?\nПерейдите к блоку «Публикация версии».\nУкажите процент пользователей.\nВы можете выбрать процент пользователей, если выбрана автоматическая публикация или публикация вручную.\nНажмите «Отправить на модерацию».\nПриложение отправляется на модерацию."}
{"request": [{"role": "user", "text": "Управление публикацией во время модерации"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите версию приложения в статусе «Ожидает модерации».\nВ меню нажмите «Редактировать описание». Откроется страница публикации версии приложения.\nПерейдите к блоку «Параметры развёртывания» и укажите процент пользователей.\nНажмите «Отправить на модерацию».\nЕсли вы измените автоматическую или ручную публикацию на отложенную, процент пользователей автоматически станет 100%."}
{"request": [{"role": "user", "text": "Управление публикацией после модерации"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите версию приложения в статусе «Готова к публикации».\nНажмите на кнопку с ранее настроенным процентом аудитории.\nУкажите процент пользователей.\nИзменение процента пользователей доступно только в большую сторону.\nНажмите «Применить».\nВерсия приложения публикуется и рандомно выбранные пользователей получают обновление версии приложения.\nВы можете остановить поэтапную публикацию. Нажмите на кнопку меню и выберите «Снять с публикации». Обновленная версия будет деактивирована, активируется последняя активная версия.\nЕсли пользователи установили новую версию приложения до деактивации, то они продолжат ей пользоваться."}
{"request": [{"role": "user", "text": "Что такое подписи приложений Android?"}], "response": "RuStore поддерживает один формат приложений — это файлы с расширением APK.\nКаждый APK-файл должен быть подписан цифровым сертификатом, который Android использует для идентификации автора приложения. Подпись необходимо хранить так же надёжно, как и личный пароль."}
{"request": [{"role": "user", "text": "Как Android проверяет версии?"}], "response": "Android сравнивает цифровые отпечатки сертификатов каждого подписанного APK-файла.\nЦифровой отпечаток — это последовательность байтов, которая создаётся путём применения криптографической хеш-функции к открытому ключу.\nЦифровой отпечаток имеет примерно такой вид:\n43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8"}
{"request": [{"role": "user", "text": "Для чего нужна проверка подписей?"}], "response": "Этот процесс необходим, если приложение было размещено в Google Play. При загрузке такого приложения в RuStore нужно использовать ту же подпись, что и в Google Play. Тогда пользователи смогут без ошибок обновить установленные на устройстве приложения, для которых в RuStore доступна более новая версия."}
{"request": [{"role": "user", "text": "Обязательно ли использовать подпись с Google Play, если есть собственная?"}], "response": "Нет. Если ваше приложение есть в Google Play, но у вас есть собственная подпись, вам не нужно проходить проверку подписей. Вы можете сразу загрузить файлы с собственной подписью в RuStore. Процесс необходим только в том случае, если вы используете подпись Google Play. Также вы можете загрузить пакеты APK c двумя подписями."}
{"request": [{"role": "user", "text": "Почему пользователи не могут обновить приложения?"}], "response": "Одна из распространённых ошибок паблишеров — это использование разных подписей для приложения, публикуемого в RuStore и других сторах.\nНапример, первоначально загружаемая версия приложения подписана одним сертификатом. А следующая версия подписана — другим. Из-за этих различий Android не позволяет установить обновления для этого приложения.\nПочему так происходит:\nРазработчик мог утратить сертификат и сгенерировал новый для публикации приложения в сторе.\nРазработчики могут публиковать одно и то же приложение в разных магазинах. Например, изначально разработчик публиковал приложения в Google Play и использовал один сертификат. Но после перехода в RuStore начал использовать другой сертификат.\nТаким образом, пользователи делятся на два типа:\nустановившие приложение из Google Play;\nзагрузившие из RuStore.\nЕсли пользователь установил RuStore и хочет обновить приложение, которое ранее было загружено из Google Play, — он не сможет этого сделать из-за разных сертификатов."}
{"request": [{"role": "user", "text": "Как можно решить данную проблему?"}], "response": "Рекомендуемый способ — использовать один сертификат на все версии приложения, чтобы избежать проблем с обновлениями версий из разных источников.\nРадикальный способ — просить пользователей удалить «старые» версии приложения, которые не удаётся обновить, и просить скачать новые. Но такой способ связан с риском потери части аудитории.\nТакже с помощью технической поддержки RuStore можно обновить подпись приложения. Подробно описано в разделе ниже.\nRuStore рекомендует использовать сертификат, сохранённый локально для большего контроля над выпусками приложений.\nЕсли вы используете Google Play App Signing, позволяющая Google Play самостоятельно генерировать и хранить подпись, то можете столкнуться с отсутствием возможности использования сертификата вне Google Play."}
{"request": [{"role": "user", "text": "Как решить проблему через поддержку RuStore?"}], "response": "Если необходимо обновить подпись, то напишите соответствующее письмо в техподдержку на support@rustore.ru.\nСпециалисты заведут обращение и проверят принадлежность приложения к обратившемуся разработчику.\nЕсли идентификация пройдена успешно, то специалист запускает процесс деактивации старого сертификата. После этого разработчику достаточно загрузить версию APK-файла с новым сертификатом подписи общим для RuStore и других сторов."}
{"request": [{"role": "user", "text": "Что делать, если нужно использовать разные подписи?"}], "response": "Если у вас выпущена отдельная подпись для RuStore, но приложение опубликовано в Google Play — загрузите APK-файлы с обеими подписями и выберите по умолчанию подпись, выпущенную вне сервисов Google. Это сократит число ошибок при обновлении у пользователей."}
{"request": [{"role": "user", "text": "Как удалить карточку приложения"}], "response": "Вы можете удалить карточку приложения из системы RuStore Консоль. Удаление доступно только для тех приложений, в которых ни одна из версий не была отправлена на модерацию.\nУдалить карточку приложения может только владелец аккаунта. Роли пользователей в RuStore\nПерейдите в раздел «Приложения».\nВыберите нужное приложение и нажмите , чтобы перейти в контекстное меню.\nВыберите пункт «Удалить приложение».\nНажмите на кнопку «Удалить»."}
{"request": [{"role": "user", "text": "Как выбрать регион для публикации приложения"}], "response": "Выберите территории, где пользователи смогут установить ваше приложение на свои устройства. Сейчас в RuStore доступно отображение приложений в России и других странах.\nПользователи смогут обновить уже скачанные приложения независимо от настроек доступности.\nОткройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите нужное приложение.\nВ левом боковом меню выберите «Страны и регионы».\n5. Проверьте наличие галочек напротив названий территорий, где ваше приложение будет доступно.\nСнимите галочку рядом с названием региона, чтобы приложение не отображалось на выбранной территории."}
{"request": [{"role": "user", "text": "Платные приложения"}], "response": "Выберите тип приложения при добавлении в RuStore Консоль: бесплатное или платное.\nПодключите монетизацию, чтобы загружать платные приложения. Как это сделать?\nОткройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nНажмите «Добавить приложение».\nВ открывшемся окне введите название приложения.\nВыберите параметр «Бесплатное» или «Платное».\nИзменение параметра будет недоступно для этой версии приложения.\n6. Нажмите «Добавить».\nВы можете обновить цены вашего приложения при редактировании или при загрузке новой версии приложения."}
{"request": [{"role": "user", "text": "Как изменить цену приложения"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите приложение.\nНажмите «Редактировать».\nВведите новую стоимость приложения.\nНажмите «Отправить на модерацию».\nПеред отправкой приложения на модерацию обязательно проверьте приложение на соответствие требованиям к приложениям.\nБудет создана новая версия приложения, которая отправится на модерацию. После прохождения модерации статус приложения изменится и появится кнопка «Опубликовать».\nДля публикации приложения нажмите «Опубликовать». Новая цена приложения отобразится в RuStore.\nЧтобы настроить цены на товары в приложении, узнайте, как создавать платный товар в приложении.\nЧтобы настроить цены на подписки, узнайте, как создавать подписку на приложение."}
{"request": [{"role": "user", "text": "Комиссия в платных приложениях"}], "response": "Комиссия RuStore составляет 15% от дохода разработчика.\nАктуальные условия по размеру комиссии можно посмотреть в разделе «Соглашение RuStore о распространении программных продуктов»."}
{"request": [{"role": "user", "text": "Рекомендации по ASO"}], "response": "Одним из главных факторов, влияющих на развитие RuStore, является доступность приложений. Чтобы пользователи могли найти ваше приложение, его важно подробно описать и интересно оформить. Это поможет увеличить число установок и улучшить позиции в списках приложений и поиске.\nRuStore использует несколько параметров для формирования результатов поиска приложений. Вот некоторые из них, на которые мы бы хотели обратить дополнительное внимание:\nРейтинг. Чем он выше, тем выше позиция приложения в списке. Важно, чтобы разработчик активно отвечал на отзывы пользователей. RuStore проводит автоматическую и ручную проверку рейтинга, чтобы убедиться в отсутствии накруток. Вы можете увеличить число оценок запрашивая их у пользователей с помощью RuStore SDK для подключения отзывов и оценок.\nЧисло установок. Чем их больше, тем выше вероятность попадания приложения в топ. Однако, не стоит использовать накрутки, важен только органический трафик. Чтобы продвигать приложение, разработчик может разместить на своих ресурсах кнопку для скачивания или использовать рекламу. Это поможет привлечь аудиторию и улучшить позиции.\nКоличество переходов в установку. RuStore рекомендует сразу оформлять свои приложения так, чтобы конверсия была высокой. Важно правильно оформить скриншоты, добавить в описание достаточное их количество и вести раздел «Что нового?». Это поможет поднять количество скачиваний приложения.\nКоличество оценок и их распределение. Чем больше положительных оценок, тем лучше! RuStore рекомендует вовремя отвечать своим пользователям, дорабатывать приложение, чтобы улучшать его функциональность, стимулировать пользователей ставить оценки и писать комментарии. Это также позволит приложению подняться выше в выдаче. Необхдимо помнить, что RuStore отслеживает накрутки и пресекает их использование, это только навредит. RuStore SDK для подключения отзывов и оценокпозволит упростить работу с отзывами и нативно привлекать пользователей оставлять их прямо из приложения."}
{"request": [{"role": "user", "text": "Возрастные ограничения"}], "response": "Для приложений, опубликованных в RuStore, работает система возрастных ограничений. Ограничения помогают пользователям понять, содержит ли приложение потенциально недопустимый контент для людей определенного возраста.\nВозрастные ограничения не несут информации о целевой группе приложения.\nУкажите возрастное ограничение при публикации приложения или его новой версии, если с обновлением появился потенциально недопустимый контент для определенной возрастной группы. Эта информация поможет пользователям RuStore принять решение об установке приложения."}
{"request": [{"role": "user", "text": "Как указать возрастное ограничение"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВыберите приложение.\nВыберите версию приложения.\nНажмите .\nНайдите подраздел «Возрастная категория».\nВыберите один из вариантов ограничений в выпадающем списке.\nНажмите «Сохранить»."}
{"request": [{"role": "user", "text": "Как выбрать ограничение"}], "response": "В RuStore используются следующие возрастные ограничения:\nВозрастные ограничения не указывают на сложность игр. Рекомендуем родителям или опекунам ориентироваться на возрастное ограничение, чтобы убедиться, что содержание игры подходит ребёнку."}
{"request": [{"role": "user", "text": "Инструкция по категориям приложений для RuStore"}], "response": "Здесь собрана общая информация о том, какие приложения входят в каждую категорию, а также примеры для наглядности. Внимательно изучите таблицу перед тем, как выбрать категорию для загружаемого приложения и отправить его на модерацию.\nКак выбрать категорию\nОткройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения».\nНажмите «Добавить приложение».\nВведите название приложения в открывшемся окне.\nВыберите тип вашего приложения в блоке «Тип»: неигровое приложение и игра. Приложения первого типа расположены на главной странице RuStore на вкладке «Приложения», а второго — на вкладке «Игры».\nВыберите основную категорию для своего приложения с учётом его особенностей в выпадающем списке. Приложение разместится в выбранной категории в магазине.\nВыберите дополнительную категорию. Приложение разместится сразу в двух категориях в магазине.\nДля приложения можно выбрать две категории — основную и дополнительную: в основной категории указывается наиболее релевантная, а дополнительной категории может не быть. Если вы сомневаетесь в выборе, посмотрите таблицу ниже.\nНа этапе модерации специалисты поддержки поправят категорию приложения, если потребуется.\nОбратите внимание на столбец «Требования»: в нём прописаны требования и уточнения, которые нужно обязательно учесть при назначении категорий.\nТребованиями также руководствуются модераторы. Эти правила помогают нам настроить правильную выдачу в категориях и обеспечить всем приложениям справедливое размещение в RuStore.\nУказывайте только релевантные категории для приложения в соответствии с инструкцией, чтобы процесс публикации прошел максимально быстро и эффективно, а пользователям было легче найти приложение."}
{"request": [{"role": "user", "text": "Работа с оценками и отзывами пользователей"}], "response": "Скачав приложение из RuStore, пользователи могут оценить его и оставить отзыв. Один пользователь может добавить оценку и отзыв только один раз, при этом разрешается изменить их в любое время.\nСейчас в системе RuStore Консоль вы можете отслеживать оценки и отзывы. В будущем мы добавим инструменты для анализа этих данных.\nВы можете написать публичный ответ на отзыв. Эта возможность даётся, чтобы вы могли выстраивать отношения с пользователями. Вы можете:\nпоблагодарить пользователя за хороший отзыв;\nответить на вопросы;\nузнать, какими функциями пользователи хотят пользоваться в вашем приложении;\nузнать об ошибках в приложении."}
{"request": [{"role": "user", "text": "Как написать ответ на отзыв"}], "response": "Чтобы написать ответ на отзыв пользователя:\nОткройте RuStore Консоль.\nПерейдите на вкладку «Отзывы» на панели слева.\nНажмите «Ответить» под отзывом, на который хотите написать ответ.\nВведите текст ответа в поле «Ответ разработчика» и нажмите «Опубликовать».\nВаш ответ будет отправлен на модерацию и ему будет присвоен статус «На модерации». После прохождения модерации статус изменится на «Опубликовано»."}
{"request": [{"role": "user", "text": "Изменение и удаление ответов на отзывы пользователей"}], "response": "При необходимости вы можете отредактировать или удалить ответ в любое время."}
{"request": [{"role": "user", "text": "Как изменить свой ответ на отзыв"}], "response": "Откройте RuStore Консоль.\nПерейдите на вкладку «Отзывы» на панели слева.\nНажмите «Редактировать» под вашим ответом на отзыв.\nВнесите необходимые изменения в поле «Ответ разработчика» и нажмите «Опубликовать».\nПосле изменения ваш ответ повторно будет отправлен на модерацию и опубликован после проверки модератором."}
{"request": [{"role": "user", "text": "Как удалить свой ответ на отзыв"}], "response": "Откройте RuStore Консоль.\nПерейдите на вкладку «Отзывы» на панели слева.\nНажмите «Удалить» под ответом на отзыв и он будет удалён."}
{"request": [{"role": "user", "text": "Требования по ответам на отзывы"}], "response": "Не отклоняйтесь от темы. Ответ должен быть ясным, правдивым, полезным и соответствовать содержанию отзыва.\nБудьте вежливы. Ваша цель — помочь пользователям найти решение проблемы, а не отпугнуть их. Не публикуйте ответы на отзывы с оскорблениями, угрозами, пренебрежительными или дискриминационными высказываниями. Не провоцируйте пользователей оставлять подобные комментарии.\nОтвечайте на все отзывы. Так вы покажете пользователям, что цените их мнение. Приложения, разработчики которых комментируют отзывы, как правило, получают более высокие оценки.\nЕсли пользователь настроен крайне негативно, не отвечайте негативом. Как отвечать на негативные отзывы?\nПостарайтесь ускорить работу с позитивными отзывами, тогда у вас будет больше времени на решение сложных проблем пользователя. Например, создайте на локальном компьютере шаблоны для быстрых ответов и вставляйте готовый ответ. Пока в RuStore нет встроенных шаблонов, но мы обязательно добавим такую функциональность.\nЕсли вы используете шаблоны для быстрых ответов, то старайтесь менять формулировки от отзыва к отзыву. У пользователя не должно создаваться ощущение, что ему отвечает робот.\nНе публикуйте в ответах ссылки на сторонние магазины приложений или витрины, фишинговые и нерелевантные ссылки.\nНе публикуйте в ответах рекламу и промокоды других сервисов или покупок внутри приложения, а также предложения загрузить приложение из другого стора или витрины. Пользователи не считают подобную информацию полезной.\nНе публикуйте материалы сексуального характера и не используйте неприличные выражения.\nНесоблюдение этих требований может привести к блокировке приложения или всего аккаунта разработчика."}
{"request": [{"role": "user", "text": "Работа с негативными отзывами"}], "response": "Мнение пользователя о приложении возможно изменить в лучшую сторону, если корректно ответить на отзыв."}
{"request": [{"role": "user", "text": "Как отвечать на негативные отзывы"}], "response": "Избегайте односложных ответов без извинений. Скорее всего, ответ в одну строку не покажется приятным возмущенному пользователю, это будет выглядеть грубо и вызовет еще больше негатива.\nНе отвечайте официальным тоном. Формальные конструкции могут читаться так, будто пользователю отвечает не человек, а бот.\nВажно показать, что вы понимаете и разделяете чувства пользователя. Если проблема на стороне вашего приложения, нужно признать ошибку.\nПостарайтесь помочь пользователю в ответе. Старайтесь не использовать шаблоны для быстрых ответов на негативные отзывы. Всегда следует учитывать контекст и смотреть, насколько шаблонный ответ подходит под него.\nБлагодарите пользователя за сообщения об ошибках в приложении. Такие отзывы помогают вам сделать приложение удобнее, чтобы люди хотели пользоваться им больше.\nОбъясните пользователю, почему в приложении дано именно такое решение проблемы. Иногда пользователи не понимают, зачем вы убрали их любимую функцию. Если вы сможете обосновать это, возможно, негатив пользователя снизится.\nОтвечайте на отзывы быстро. Чем скорее вы поможете пользователю решить проблему, тем больше шансов, что он продолжит использовать приложение и повысит рейтинг.\nЕсли вы обнаружили отзыв или комментарий, содержащий необъективную информацию, мат или оскорбления, напишите нам. Мы постараемся решить проблему."}
{"request": [{"role": "user", "text": "Как собрать HAR-логи"}], "response": "HAR-логи (HTTP-архив) содержат записи обо всех сетевых запросах и ответах, сделанных браузером при загрузке определённой веб-страницы. В них находятся такие данные, как URL-адрес запрошенного ресурса, метод HTTP, используемый для его запроса, код ответа.\nHAR-логи собираются для диагностики проблем загрузки веб-страниц, выявления ресурсов с медленной скоростью загрузки и сетевых ошибок, мониторинга производительности и оптимизации сайта, сравнения производительных различных страниц.\nБольшинство браузеров позволяют собрать HAR в отдельный файл, который потом можно передать технической поддержке для понимания причин возникновения бага.\nПрежде чем приступить к работе, включите запись логов в консоли, чтобы точно зафиксировать ошибку."}
{"request": [{"role": "user", "text": "Чтобы собрать HAR-логи:"}], "response": "1. Нажмите F12 на клавиатуре. Откроется окно инструментов разработчика.\n2. Выберите вкладку «Сеть»/«Network».\n3. Нажмите , чтобы очистить сетевой журнал.\n4. Установите «флажки» в полях «Сохранять журнал»/«Preserve log» и «Отключить кеш»/«Disable cache».\n5. Повторите действия, которые привели к возникновению проблемы.\n6. Нажмите , чтобы сохранить HAR-логи.\n7. Выберите папку для сохранения в открывшемся окне.\n8. Нажмите «Сохранить».\nВ указанную папку будут собраны и сохранены HAR-логи."}
{"request": [{"role": "user", "text": "Чтобы собрать консольные логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Перейдите на вкладку «Console».\n3. Нажмите правой кнопкой мыши в любой области окна и выберите в контекстном меню «Save as».\n4. Выберите папку для сохранения логов и нажмите «Сохранить».\nКонсольные логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать HAR-логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Нажмите «Открыть средства разработчика».\n3. Откройте выпадающее меню и выберите «Сеть».\n4. Нажмите , чтобы очистить сетевой журнал.\n5. Установите флажки «Сохранить журнал» и «Отклюить кэш».\n6. Воспроизведите проблему.\n7. Нажмите правой кнопкой мыши на любой лог и выберите «Сохранить как все HAR с содержимым», чтобы сохранить HAR-логи.\n8. Выберите папку для сохранения логов и нажмите «Сохранить».\nHAR-логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать консольные логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Нажмите «Открыть средства разработчика».\n3. Откройте выпадающее меню и выберите «Консоль».\n4. Нажмите правой кнопкой мыши в любой области окна и выберите в контекстном меню «Save as».\n5. Выберите папку для сохранения логов и нажмите «Сохранить».\nКонсольные логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать HAR-логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Перейдите на вкладку Сеть.\n3. Нажмите , чтобы начать сеанс профилирования.\n4. Воспроизведите проблему.\n5. Нажмите  после воспроизведения проблемы, чтобы остановить сеанс профилирования.\n6. Нажмите , чтобы экспортировать HAR-файл.\n7. Выберите папку для сохранения логов и нажмите «Сохранить».\nHAR-логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать консольные логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Перейдите на вкладку «Консоль».\n3. Нажмите правой кнопкой мыши в любой области окна и выберите в контекстном меню «Копировать все».\n4. Создайте новый текстовых файл в формате TXT и откройте его.\n5. Вставьте скопированные данные и сохраните файл.\nКонсольные логи будут сохранены в созданном файле."}
{"request": [{"role": "user", "text": "Чтобы собрать HAR-логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Перейдите на вкладку «Сеть».\n3. Установите флажок «Непрерывные логи».\n4. Воспроизведите проблему.\n5. Нажмите правую кнопку мыши в сетевой таблице после воспроизведения проблемы и выберите Сохранить все как HAR.\n6. Выберите папку для сохранения логов и нажмите «Сохранить».\nHAR-логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать консольные логи:"}], "response": "1. Нажмите F12 на клавиатуре, чтобы открыть окно инструментов разработчика.\n2. Перейдите на вкладку Консоль.\n3. Выберите папку для сохранения логов и нажмите «Сохранить».\nКонсольные логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать HAR-логи:"}], "response": "1. В строке меню выберите «Разработка».\nЕсли в строке нет «Разработки», нажмите «Safari», перейдите в «Настройки», нажмите «Дополнения» установите флажок «Показывать меню “Разработка” в строке меню».\n2. Нажмите «Подключить веб-инспектор».\n3. Откройте вкладку «Сеть».\n4. Установите флажок в поле «Сохранить журнал».\n5. Нажмите «Импортировать».\n6. Выберите папку для сохранения в открывшемся окне.\n7. Нажмите «Сохранить».\nHAR-логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать консольные логи:"}], "response": "1. В строке меню выберите «Разработка».\n2. Нажмите «Подключить веб-инспектор».\n3. Откройте вкладку «Консоль».\n4. Нажмите правой кнопкой мыши в любой области окна и выберите в контекстном меню «Сохранить выбранные».\n5. Выберите папку для сохранения логов и нажмите «Сохранить».\nКонсольные логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать HAR-логи:"}], "response": "1. Нажмите «Ctrl+Shift+I» или «Ctrl+Shift+J», чтобы открыть окно инструментов разработчика.\n2. На вкладке «Сеть» проверьте индикатор записи. Он должен гореть красным. Если нет — нажмите на него, чтобы запустить.\n3. Отметьте «Сохранять журнал», чтобы сохранить логи при переходе на другую страницу.\n4. Обновите страницу кнопкой F5 и повторите ошибку.\n5. Правой кнопкой мыши кликните по любой записи в логе и выберите Сохранить все как HAR с контентом.\n6. Выберите папку для сохранения в открывшемся окне.\n7. Нажмите «Сохранить».\nHAR-логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Чтобы собрать консольные логи:"}], "response": "1. Нажмите «Ctrl+Shift+I» или «Ctrl+Shift+J», чтобы открыть окно инструментов разработчика.\n2. Перейдите на вкладку «Консоль».\n3. Нажмите правой кнопкой мыши в любой области окна и выберите в контекстном меню «Сохранить как».\nВыберите папку для сохранения логов и нажмите «Сохранить».\nКонсольные логи будут собраны и сохранены в указанной папке."}
{"request": [{"role": "user", "text": "Монетизация"}], "response": "Для подключения монетизации:\nЗаполните заявление на монетизацию.\nНастройте в приложении RuStoreSDK для подключения платежей или добавьте платное приложение через RuStore Консоль.\nСоздайте подписки или разовые покупки."}
{"request": [{"role": "user", "text": "Монетизация нерезидентов"}], "response": "Иностранные компании, зарегистрированные в RuStore, теперь могут подключить монетизацию и получать доход от размещения платных приложений или встроенных в приложение покупок (в том числе подписок).\nПодключение монетизации доступно на условиях стандартного дополнительного соглашения. Актуальная на момент подачи заявления валюта расчетов будет отображаться в форме."}
{"request": [{"role": "user", "text": "Как создать и подписать заявление"}], "response": "Войдите в RuStore Консоль.\nПерейдите на вкладку «Компания» в верхней части экрана.\nВыберите «Монетизация» в левом боковом меню.\nНажмите «Заполнить заявление».\nЗаполните данные в открывшемся окне."}
{"request": [{"role": "user", "text": "Основная информация"}], "response": "Информация в поле «Торговое и юридическое название» подгружается согласно учредительным документам. Если данные указаны некорректно, обратитесь в поддержку и подайте заявление после исправления данных.\nМы можем попросить вас подтвердить ваши права на указанное торговое название. Регистрация прав не требуется, однако в этом случае мы попросим вас гарантировать, что использование данного торгового названия не нарушает права третьих лиц."}
{"request": [{"role": "user", "text": "Представитель отличается от владельца компании"}], "response": "Если представитель отличается от владельца компании в RuStore, заполните информацию о представителе согласно документу-основанию права представителя. В качестве такого документа приложите решение о назначении, доверенность и т. д. Убедитесь, что здесь указан именно тот человек, который будет подписывать дополнительное соглашение от имени вашей компании."}
{"request": [{"role": "user", "text": "Информация о компании"}], "response": "Убедитесь, что информация в полях «Налоговый номер» и «Юридический адрес», соответствует данным в учредительных документах.\nЕсли юридический адрес не совпадает с фактическим, необходимо также указать фактический адрес, по которому компания осуществляет свою деятельность."}
{"request": [{"role": "user", "text": "Контакты для пользователей по вопросам обратной связи"}], "response": "Служба поддержки RuStore может передавать эти контакты пользователям или публиковать их на витрине приложений.\nВ блоке «Контактное лицо» укажите контактные данные, по которым пользователи RuStore могут обратиться к вам по вопросам поддержки приложений, а также для направления финансовых претензий (запросов на возврат/отмену платежа, информирование о мошеннических платежах).\nИнформация в блоках «Номер телефона» и Email используется для внутренних коммуникаций с RuStore и будет видна пользователям. В поле «Номер представителя» следует указать международный номер телефона.\nТакже вы можете указать предпочтительный способ связи, добавив ссылку на мессенджеры, форму обратной связи или другой инструмент, используемый для получения обратной связи от пользователей (опционально). Рекомендуем проверить доступность этого инструмента для пользователей из РФ."}
{"request": [{"role": "user", "text": "Информация о договоре"}], "response": "Имя главного бухгалтера компании.\nБухгалтерская отчетность: отчет о прибылях и убытках, балансовый отчёт.\nДокументы, подтверждающие налоговое резидентство: свидетельство о налоговом резидентстве предоставляется во избежание двойного налогообложения. В дальнейшем мы попросим вас обновлять этот документ ежегодно."}
{"request": [{"role": "user", "text": "Пример отчета о выполнении Поручений по Соглашению RuStore о распространении программных продуктов"}], "response": "Ежемесячно на почту разработчика приходит отчёт по монетизации. Ниже представлен пример отчёта с описанием полей."}
{"request": [{"role": "user", "text": "Как создать подписку на приложение"}], "response": "Создайте подписку в системе RuStore Консоль, чтобы пользователи могли покупать подписку на приложение в магазине RuStore:\nОткройте систему RuStore Консоль.\nПерейдите во вкладку «Приложения» в верхней части экрана.\nВ левом боковом меню, в разделе «Монетизация» выберите «Подписки».\nЧтобы создать подписку, нажмите «Новая подписка». Если ранее вы не создавали подписки, кнопка будет в центре экрана. Если подписки уже есть — справа сверху.\nУкажите пользовательскую и техническую информацию о подписке, а также дополнительные настройки.\nНажмите «Создать» в левом нижнем углу экрана.\nНажмите «Опубликовать» в левом нижнем углу экрана. Если на этом шаге нужно отредактировать информацию о подписке, нажмите «Редактировать».\nНажмите «Опубликовать» во всплывающем окне.\nРегулярные платежи списываются в течение 8 часов до момента окончания подписки. Например, если подписка была оформлена в 16:00, то последующие регулярные платежи списываются в промежутке с 08:00 до 16:00. Условия списания должны регламентироваться пользовательской документацией разработчика."}
{"request": [{"role": "user", "text": "Как создать платный товар в приложении"}], "response": "Откройте систему RuStore Консоль.\nПерейдите на вкладку «Приложения» в верхней части экрана.\nВ левом боковом меню, в разделе «Монетизация» выберите «Разовые покупки».\nНажмите «Новый товар» в центре экрана.\nУкажите пользовательскую и техническую информацию о товаре.\nНажмите «Создать» в левом нижнем углу экрана.\nНажмите «Опубликовать» в левом нижнем углу экрана. Если на этом шаге нужно отредактировать информацию о товаре, нажмите «Редактировать».\nВо всплывающем окне нажмите «Опубликовать»."}
{"request": [{"role": "user", "text": "Управление платежами"}], "response": "В RuStore Консоли можно просматривать платежи по каждому приложению, для которого подключена монетизация."}
{"request": [{"role": "user", "text": "Как просмотреть информацию по платежам"}], "response": "Откройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Монетизация → Управление платежами».\nТаблица с данными о покупках выводится в случае, если по приложению проводились покупки. В таблице можно просмотреть:\nдату и время покупки;\nномер счёта и номер заказа;\nномер карты или номер телефона, с которого была произведена оплата;\nсумму покупки;\nи статус счета.\nНомер заказа есть только у платежей по подпискам. Этот номер будет одинаковым у всех платежей в рамках одной подписки.\nВы также можете кликнуть на интересующий вас платеж, чтобы просмотреть детальную информацию о нём."}
{"request": [{"role": "user", "text": "Поиск платежа"}], "response": "Для поиска интересующего вас платежа и просмотра информации о нём выполните следующие действия:\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Монетизация → Управление платежами».\nВ поле поиска введите номер счета. Отразится информация о сумме и статусе платежа. Выберите идентификатор, по которому хотите производить поиск — номер счета или номер заказа. После этого введите в поле поиска номер счета или заказа соответственно. В поисковой выдаче вы увидите все платежи в вашем приложении, соответствующие критериям поиска.\nПлатёж может быть в одном из следующих статусов:\nВ обработке: средства на карте покупателя захолдированы. Покупка ожидает потребления.\nОтменено: средства на карте покупателя разблокированы. Покупка отменена.\nОплачено: операция подтверждена, средства списаны со счёта покупателя.\nВозвращено: средства возвращены на счёт покупателя. Срок зачисления средств на счет покупателя может составлять до 5 рабочих дней."}
{"request": [{"role": "user", "text": "Возврат платежа"}], "response": "Для возврата платежа покупателю выполните следующие действия:\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Монетизация → Управление платежами».\nВыберите счёт, по которому необходимо произвести возврат.\nВо всплывающем окне нажмите «Вернуть платеж», чтобы перейти на страницу оформления возврата.\n6. Ознакомьтесь с информацией в новом окне и снова выберите «Вернуть платеж».\nВозврат платежа не деактивирует товар или подписку у пользователя.\nПосле оформления возврата статус покупки изменится на «Возвращено». Уплаченные ранее средства будут возвращены на счет покупателя."}
{"request": [{"role": "user", "text": "Тестовые платежи"}], "response": "Протестируйте платежи по подпискам и платным товарам в мобильном приложении. Процесс покупки в тестовом режиме повторяет обычный платёж, но с использованием тестовых банковских карт.\nДля тестирования платежей приложение должно пройти модерацию. Хотя бы его первая версия."}
{"request": [{"role": "user", "text": "Возможности"}], "response": "Функция «Тестовые платежи» предоставляет следующие возможности:\nУправление тестовым режимом через RuStore Консоль.\nТестирование сценариев оплаты покупок в вашем приложении, которое проводится в изолированной тестовой среде с использованием специальных тестовых карт и без влияния на рабочую версию приложения.\nПросмотр истории тестовых платежей в RuStore Консоль."}
{"request": [{"role": "user", "text": "Технические особенности"}], "response": "Выполнять тестирование можно до публикации версии приложения на всех пользователей.\nВ тестовом режиме можно приобретать те же товары и подписки, которые добавлены в рабочую версию приложения. Публиковать их не обязательно.\nМожно многократно тестировать покупку нерасходуемых товаров. Например, доступ к полной версии приложения или скин в игре. Если вернуть платёж через RuStore консоль, после этого можно снова совершить покупку в приложении.\nВ тестовом режиме для подписок применяются специальные параметры. Они не зависят от параметров, которые вы выбрали для рабочей версии приложения, и не влияют на них. Эти технические особенности призваны упростить и ускорить тестирование. Параметры из следующей таблицы одинаковы для всех подписок в тестовом режиме."}
{"request": [{"role": "user", "text": "Ограничения"}], "response": "Владелец приложения является единственным пользователем, которому доступно тестирование платежей. Только у него есть доступ к разделу «Тестовые платежи». Мы работаем над возможностью добавлять других тестировщиков.\nТестирование покупки платного приложения в магазине RuStore недоступно.\nНет возможности получить информацию о тестовых платежах и подписках через public API.\nВ мобильном приложении RuStore не отображается история тестовых покупок и тестовые подписки. Это означает, что тестовые подписки нельзя отменить и возобновить.\nОплата тестовых покупок производится только тестовыми банковскими картами."}
{"request": [{"role": "user", "text": "Перед началом тестирования платежей"}], "response": "Встройте в тестируемое приложение версию SDK, которая поддерживает функцию тестирования платежей — RuStore SDK billingclient 3.1.0 или выше.\nУбедитесь, что на устройстве Android, на котором планируется тестировать ваше приложение, установлен RuStore версии 1.29 или выше.\nУбедитесь, что компания не заблокирована, у нее подключена монетизация и в приложении есть возможность совершать покупки. Вы можете настроить подписки и платные товары в RuStore Консоль, но не публиковать их для пользователей.\n- Как подключить монетизацию- Как создать платный товар в приложении\n- Как создать подписку на приложение"}
{"request": [{"role": "user", "text": "Включение тестового режима"}], "response": "Тестировать платежи можно после завершения модерации и до публикации новой версии приложения. Вы также можете тестировать покупки для приложения, которое уже опубликовано.\nРежим тестирования включается только для тестировщика и только в выбранном приложении. В других приложениях этот же пользователь будет совершать реальные покупки. Также все остальные пользователи в этом приложении будут совершать реальные покупки.\nПо умолчанию режим тестирования отключен.\nЧтобы включить тестовый режим:\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Монетизация — Тестовые платежи».\nПереключитесь на вкладку «Тестировщики». Если на вкладке отображается окно «Добавьте себя в список тестировщиков», нажмите «Стать тестировщиком».\nАктивируйте переключатель в столбце «Режим тестирования».\nПосле включения тестового режима тестировщик будет совершать в вашем приложении тестовые покупки, и ему станут доступны покупки ещё не опубликованных товаров."}
{"request": [{"role": "user", "text": "Просмотр тестовых платежей"}], "response": "Чтобы посмотреть историю тестовых платежей:\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню и откройте приложение, в котором совершалась тестовая покупка.\nПерейдите на вкладку «Монетизация — Тестовые платежи».\nНа вкладке «История платежей» отображаются все платежи, которые выполнены в тестовом режиме. По функциональным возможностям этот раздел повторяет «Управление платежами», в котором отображаются покупки пользователей, совершенные в рабочей версии приложения.\nНа вкладке «Истории платежей» вы можете:\nИскать тестовый платеж по номеру счета и номеру заказа.\nПросматривать детальную информацию по каждому платежу, нажав на него.\nВыполнить возврат, чтобы заново протестировать приобретение нерасходуемого товара. Для этого нажмите на платёж, а затем на кнопку «‎Вернуть платёж»."}
{"request": [{"role": "user", "text": "Отключение тестового режима"}], "response": "После завершения тестирования платежей вы можете отключить тестовой режим. Делать это не обязательно, вы можете оставаться в тестовом режиме сколько времени, сколько необходимо.\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Монетизация — Тестовые платежи».\nПереключитесь на вкладку «Тестировщики».\nДеактивируйте переключатель в столбце «Режим тестирования».\nПри отключении тестового режима:\nТестировщик станет выполнять реальные покупки в приложении.\nВсе платежи, выполненные в тестовом режиме, сохраняются в RuStore Консоль на вкладке «История платежей».\nКупленные платные товары остаются доступны для учетной записи при следующем включении тестового режима.\nТестовые подписки отключатся автоматически после 12 списаний."}
{"request": [{"role": "user", "text": "Следующие шаги"}], "response": "После того, как вы протестировали платежи и убедились в их работоспособности, можно опубликовать подписки и платные товары в приложении, а затем опубликовать новую версию приложения."}
{"request": [{"role": "user", "text": "Тестовые банковские карты"}], "response": "Для тестирования покупок вы может использовать следующие тестовые карты."}
{"request": [{"role": "user", "text": "Всегда успешная оплата"}], "response": "Покупателю предлагается выбрать результат проверки 3-D Secure."}
{"request": [{"role": "user", "text": "Карты, возвращающие ошибки"}], "response": "После трех неуспешных попыток оплаты будет произведен возврат на платежную шторку RuStore с ошибкой оплаты."}
{"request": [{"role": "user", "text": "Добавление кнопки «Скачайте из RuStore»"}], "response": "Чтобы рассказать пользователям о вашем приложении, используйте кнопку «Скачайте из RuStore».\nДвухцветная версия логотипа\nСкачать: SVG, PNG                                                     Скачать: SVG, PNG\nОдноцветная версия логотипа\nСкачать: SVG, PNG                                                     Скачать: SVG, PNG\nПримеры использования:\nСкачать SVG, PNG                                      Скачать SVG, PNG\nЛюбимые/необходимые приложения\nСкачать: SVG, PNG\nГосударственные приложения\nСкачать: SVG, PNG\nДля установки логотипа на сайте:\nСкачайте логотип «Скачайте из RuStore».\nЗагрузите его на свой сервер.\nНайдите на сайте RuStore своё приложение и скопируйте bundle_id из ссылки на него.\nПример ссылки: https://trk.mail.ru/c/me10h4?bundle_id=com.vkontakte.android\nКод для вставки на сайт:\nРекомендуемый размер изображения 188px на 63px."}
{"request": [{"role": "user", "text": "VK реклама в RuStore"}], "response": "Теперь у разработчиков появилась возможность продвигать приложения в RuStore с помощью рекламы."}
{"request": [{"role": "user", "text": "Как настроить рекламную кампанию через VK Реклама"}], "response": "Откройте в браузере платформу VK Реклама и войдите в систему.\nПерейдите в раздел «Кампании».\nНажмите «Создать кампанию».\nНажмите на иконку «Мобильное приложение». Выберите рекламируемое приложение из списка или привяжите новое через VK Рекламу.\nПри первом подключении необходимо добавить приложение и настроить интеграцию с трекером. Подробнее смотрите в разделе «Как добавить приложение через VK Реклама» ниже.\nНастройте рекламную кампанию.\nVK Реклама предоставляет множество инструментов и технологий, с помощью которых вы можете настроить рекламу максимально точно. Более подробные инструкции о настройке рекламной кампании и ответы на многие другие вопросы можно найти здесь."}
{"request": [{"role": "user", "text": "Как добавить приложение через VK Реклама"}], "response": "Откройте в браузере систему VK Реклама.\nВыберите удобный способ авторизации или создайте новый кабинет.\nПерейдите в раздел «Мобильные приложения» и нажмите «Добавить приложение».\nОткроется форма добавления приложения. Введите ссылку на приложение в RuStore и нажмите «Добавить».\nПросмотреть ссылку на своё приложение можно перейдя на веб-версию витрины RuStore.\nСтатус приложения изменится на «Проверяем доступ».\nПриступите к настройке интеграции с трекером.\nRuStore также позволяет разработчикам запускать рекламные кампании на платформе VK Реклама по прямым ссылкам без использования сторонних трекинговых систем. Для запуска кампаний из RuStore ознакомьтесь с инструкцией.\nКак реклама отображается для пользователей\nРекламные приложения доступны в разделе «Интересное».\nРеклама отображается как для авторизованных, так и для неавторизованных пользователей."}
{"request": [{"role": "user", "text": "Показ рекламы в разделе «Интересное» в RuStore:"}], "response": "Рекламный баннер отображается при переходе в раздел «Интересное». Чтобы перейти на страницу приложения, пользователь может нажать на баннер."}
{"request": [{"role": "user", "text": "Показ рекламы в поисковой выдаче:"}], "response": "Рекламный блок также отображается в поисковой выдаче на первом месте в списке.\nПо клику на «Установить» начинается загрузка рекламного приложения аналогично другим приложениям из результатов поиска."}
{"request": [{"role": "user", "text": "Заявки на события"}], "response": "События (in-app events) — способ повысить мотивацию к установке приложения, например: распродажи (для интернет-магазинов), особые предложения и ивенты в играх и другие акции с ограниченным сроком действия или условиями использования.\nRuStore Консоль позволяет отправить заявку на событие, сведения о котором будут отображаться в вашем приложении. Заявку на событие можно создать для приложения, которое содержит опубликованную версию.\nДля управления заявками на события выполните вход в RuStore Консоль.\nСрок рассмотрения заявки на событие — до 14 дней. Если с вами не связались в течении 14 дней — это значит, что заявка не прошла одобрение редакцией RuStore.\nМаксимальное количество одновременно поданных заявок на предстоящие события в рамках одного приложения — 5."}
{"request": [{"role": "user", "text": "Создание заявки"}], "response": "Чтобы создать заявку на событие, выполните следующие действия.\n1. В навигационном меню слева выберите Продвижение > Заявки на события.\nВ зависимости от того, есть ли уже у вас созданные заявки, отобразится следующая страница.\nЗаявок нет\nЕсть созданные заявки\n2. Нажмите .\nОтобразится форма создания заявки на событие (см. изображение ниже).\n3. Внесите необходимые данные, руководствуясь приведённой ниже таблицей.\n4. Нажмите .\nПосле отправки заявки на почту, которую вы указали в карточке, придёт письмо (о получении заявки командой редакции RuStore). Если письмо отсутствует, проверьте папку спам.\nОдобренное событие будет отображаться в даты проведения в карточке приложения. Также событие может попасть в список подборок на странице «Интересное», «Игры», «Приложения», если будет выбрано командой редакции RuStore."}
{"request": [{"role": "user", "text": "Просмотр заявки"}], "response": "Чтобы просмотреть созданную заявку на событие, выполните следующие действия.\nВ навигационном меню слева выберите Продвижение > Заявки на события.\nОтобразится страница со списком созданных заявок.\nВыберите нужную заявку из списка.\nОтобразится страница с подробной информацией о заявке."}
{"request": [{"role": "user", "text": "События на смартфоне"}], "response": "См. также: Инструкция по оформлению событий для дизайнеров.\nОбложка может быть:\nНа светлом фоне: текст черный.\nНа тёмном фоне: текст белый.\nРазмер итоговой карточки в мобильном приложении — 316х270.\nКарточка включает в себя:\nЗаголовок: максимальное кол-во символов — 34 (две строчки).\nКраткое описание: максимальное кол-во символов — 32 (одна строчка).\nИконка и название приложения, а также кнопка «Скачать»."}
{"request": [{"role": "user", "text": "Событие в открытом виде"}], "response": "Событие в открытом виде — всплывающее окно фиксированной высоты и ширины.\nПо краям отступы — XS (12px).\nCверху —  XL17 (88 px).\nCнизу — XL19 (96 px).\nКарточка включает в себя:\nКнопка «Закрыть»\nЗаголовок: максимальное кол-во символов — 34 (две строчки).\nОписание: максимальное кол-во символов — 448.\nИзображение\nЗагружаемое изображение: JPG, 3 Мбайт, 4:3, 2880x2160 px (2х).\nВажные элементы на изображении должны располагаться по центру в верхней части.\nПо низу изображения, где идёт иконка и название приложения, а также кнопка «Скачать», накладывается заливка и градиент. Заливку лучше выбирать под цвет изображения. Цвет указывается в HEX.\nИзображение растягивается по центру контейнера.\nЕсли есть важные детали на изображении и хочется, чтобы изображение не растягивалось на всю карточку, то можно расположить в верхней части изображения по центру."}
{"request": [{"role": "user", "text": "Градиент и подложка"}], "response": "Подложка распространяется на всю зону описания события и приложение с кнопкой, градиент начинается от начала описания вверх на 120 px."}
{"request": [{"role": "user", "text": "События на планшете"}], "response": "См. также: Инструкция по оформлению событий для дизайнеров.\nОбложка может быть:\nНа светлом фоне: текст черный.\nНа тёмном фоне: текст белый.\nРазмер итоговой карточки на планшете — 357х404.\nКарточка включает в себя:\nЗаголовок: максимальное кол-во символов — 34 (две строчки).\nКраткое описание: максимальное кол-во символов — 32 (одна строчка).\nИконка и название приложения, а также кнопка «Скачать»."}
{"request": [{"role": "user", "text": "Событие в открытом виде"}], "response": "Событие в открытом виде — всплывающее окно фиксированной высоты и ширины.\nПо краям отступы — S (16 px).\nВысота карточки фикс —  560 px, располагается по центру планшета.\nКарточка  включает в себя:\nКнопка «Закрыть».\nЗаголовок: максимальное кол-во символов — 34 (две строчки).\nОписание: максимальное кол-во символов — 448.\nРасположение контента:\nКонтент делится на две части 50/50, слева идёт изображение, справа информация:\nназвание события;\nполное описание;\nиконка и названием приложения, а также кнопка «Скачать».\nПравая часть, где расположена информация, заливается цветом, которую указали при добавление события, в HEX. Этот же цвет встречается на карточке в миниатюре, которая располагается в списке подборок."}
{"request": [{"role": "user", "text": "Изображение"}], "response": "Изображение растягивается по центру контейнера.\nРасположение\nЕсли событие одно: встает в пару с подборкой с обложкой.\nЕсли два события — рядом.\nЕсли три и более событий, появляется горизонтальная прокрутка."}
{"request": [{"role": "user", "text": "Инструменты"}], "response": "Используйте раздел «‎Инструменты»‎ в RuStore Консоли для подключения инструментов разработчика к вашим приложениям.\nИнструменты предоставляют разработчикам дополнительные возможности по управлению приложениями, поиску ошибок и интеграциям с различными сервисами.\nПодключение инструмента доступно только пользователям с правами владельца организации."}
{"request": [{"role": "user", "text": "Подключение Инструмента"}], "response": "1. Перейдите на вкладку «‎Инструменты»‎.\n2. Выберите из бокового меню интересующий инструмент и нажмите «‎Подключить». Система отобразит сообщение с результатом подключения.\nПри появлении ошибок напишите в поддержку.\nПри подключении с общей страницы инструмент подключится ко всем вашим приложениям, у которых есть хотя бы одна созданная версия в RuStore Консоли.\nПодключить инструмент также можно в боковом меню карточки приложения. В этом случае инструмент будет подключен только к выбранному приложению.\nПосле подключения вы сможете увидеть все подключенные приложения в разделе инструменты и перейти непосредственно в интерфейс инструмента.\nПри подключении в конкретном сервисе создаётся аккаунт для владельца организации в RuStore. Для того, чтобы настроить доступы для других сотрудников вашей организации, после подключения вам нужно перейти в сервис и настроить доступы в интерфейсе инструмента."}
{"request": [{"role": "user", "text": "Общая информация"}], "response": "RuStore Remote Config— инструмент для управления конфигурацией мобильных приложений. Позволяет реализовать функции feature toggle (или feature switcher) и управлять ими из удобного графического интерфейса."}
{"request": [{"role": "user", "text": "Быстрый старт"}], "response": "Установка SDK и конфигурация приложения;\nСоздание условий, по которым будут включаться параметры;\nОписание параметров в Remote Config."}
{"request": [{"role": "user", "text": "Дополнительная информация"}], "response": "Права пользователей.\nПринцип работы сервиса."}
{"request": [{"role": "user", "text": "Принцип работы"}], "response": "При создании нового приложения его код должен быть сконфигурирован так, чтобы в нём были параметры, которые можно менять с помощью конфига. Из-за этого Remote Config не может работать с любым приложением: сначала нужно адаптировать код сервиса под работу с RuStore Remote Config.\nПри запуске приложения SDK отправляет запрос в RuStore Remote Config и в качестве ответа получает конфиг — JSON с набором определённых параметров. Вместе с конфигом (параметрами, которые меняют поведение приложения) в ответе приходит и хэш от конфига. Этот хэш приложение запоминает и в следующих запросах к Remote Config отправляет его в качестве одного из параметров.\nRemote Config сравнивает полученный хэш с хэшом конфига, который нужно отдать на этот запрос. Если они совпадают, то вместо конфига сервис возвращает ответ «‎not modified»‎. Это нужно, чтобы не возвращать клиенту неизменённый конфиг.\nПосле получения конфига на устройстве отрисовывается интерфейс или изменяются фичи в зависимости от параметров конфига из RuStore Remote Config.\nПриложение применяет полученный конфиг только после перезапуска. Пользователи не увидят изменения в интерфейсе в реальном времени."}
{"request": [{"role": "user", "text": "Подключение в проект"}], "response": "Подключите репозиторий:\nbuild.gradle"}
{"request": [{"role": "user", "text": "Подключение зависимости"}], "response": "Добавьте следующий код в свой конфигурационный файл для подключения зависимости:\nbuild.gradle\nПример приложения с подключённым SDK."}
{"request": [{"role": "user", "text": "Общая информация"}], "response": "SDK Remote Config — это облачный сервис, который позволяет изменять поведение и внешний вид вашего приложения, не требуя от пользователей загрузки обновления приложения. SDK инкапсулирует в себе запрос конфигурации с сервера, кэширование, фоновое обновление. Имеет удобный api для получения данных.\nПриложение-пример доступно по ссылке."}
{"request": [{"role": "user", "text": "Ключевые особенности"}], "response": "SDK позволяет выбрать наиболее удобный механизм обновления конфигурации.\nИмеет возможность указывать процент распространения конфигурации на аудиторию.\nДля построения воронки конкретной конфигурации можно передавать дополнительную информацию. Возможно формировать конфигурации даже для конкретных пользователей.\nИмеет набор колбэков о работе SDK, которые можно использовать для аналитики.\nИмеет минимальное количество внешних зависимостей."}
{"request": [{"role": "user", "text": "Подключение в проект"}], "response": "Подключите репозиторий:\nbuild.gradle"}
{"request": [{"role": "user", "text": "Подключение зависимости"}], "response": "Добавьте следующий код в свой конфигурационный файл для подключения зависимости:\nbuild.gradle"}
{"request": [{"role": "user", "text": "Создание и инициализация RemoteConfigClient"}], "response": "Инициализация RemoteConfigClient должна происходить в момент Application.onCreate(), так как при запуске фоновой синхронизации SDK должна быть проинициализирована."}
{"request": [{"role": "user", "text": "Создание RemoteConfigClient"}], "response": "Через RemoteConfigClientBuilder можно установить дополнительные параметры, которые могут быть использованы для получения конкретной конфигурации.\nПовторный вызов RemoteConfigClientBuilder.build() вызовет ошибку RemoteConfigClientAlreadyExist .\nПосле вызова метода RemoteConfigClientBuilder.build() создается экземпляр RemoteConfigClient и записывается синглтон. Получить созданный экземпляр можно следующим образом:\nДоступ через статическую переменную до создания через RemoteConfigClientBuilder.build() вызовет ошибку RemoteConfigClientNotCreated."}
{"request": [{"role": "user", "text": "UpdateBehaviour"}], "response": "UpdateBehaviour — это параметр, определяющий поведение SDK. При создании экземпляра RemoteConfigClientBuilder, по умолчанию используется значение UpdateBehaviour.Default с интервалом синхронизации 15 минут.\nУстановить другое поведение SDK можно следующим образом:"}
{"request": [{"role": "user", "text": "ConfigRequestParameterProvider"}], "response": "Реализация ConfigRequestParameterProvider дает возможность динамически передавать параметры на сервер для синхронизации конфигурации.\nПоддерживаемый список параметров: Language и Account\nРеализация метода должна выполняться быстро, без длительных операций. Реализация долго работающего метода getConfigRequestParameter может привести к большим задержкам при получении конфигурации.\nВызов метода будет происходить на потоках RemoteConfig SDK.\nДобавить реализацию ConfigRequestParameterProvider можно следующим образом:"}
{"request": [{"role": "user", "text": "RemoteConfigClientEventListener"}], "response": "Реализация RemoteConfigClientEventListener дает возможность получать колбэки о работе SDK, такие как завершение инициализации, обновление постоянного хранилища и т. д.\nКолбэки слушателя вызываются на MainThread.\nДобавить реализацию RemoteConfigClientEventListener можно следующим образом:\nПример имплементации RemoteConfigEventListener:"}
{"request": [{"role": "user", "text": "Инициализация RemoteConfigClient"}], "response": "Инициализация RemoteConfigClient выполняется асинхронно, результат инициализации можно отслеживать через класс Task, который возвращает метод init() или через слушатель."}
{"request": [{"role": "user", "text": "Получение конфигурации из RemoteConfigClient"}], "response": "Получение конфигурации из RemoteConfigClient происходит через вызов метода getRemoteConfig().\nЕсли RemoteConfigClient не был проинициализирован ранее, то при первом вызове метода getRemoteConfig() произойдет инициализация, что может занять некоторое время. Для более быстрого получения конфигурации, инициализацию RemoteConfigClient стоит производить заранее.\nМетод getRemoteConfig() возвращает Task<RemoteConfig> и выполняется асинхронно. Task может завершиться неудачно. Ошибки SDK RemoteConfig\nПосле успешного завершения Task, появится доступ к RemoteConfig, это текущий набор всех данных, полученных в зависимости от выбранной политики обновления и параметров при инициализации. При некоторых политиках обновления, получение конфигурации будет зависеть не от текущих параметров инициализации, а от параметров, которые использовались во время фоновой синхронизации."}
{"request": [{"role": "user", "text": "Класс RemoteConfig"}], "response": "Экземпляр RemoteConfig — это текущий набор всех данных, полученных в зависимости от выбранной политики обновления при инициализации, экземпляр имеет весь набор ключей, которые были переданы с сервера в зависимости от параметров, указанных при инициализации."}
{"request": [{"role": "user", "text": "Проверка доступности ключа"}], "response": "Метод проверяет наличие ключа в текущем экземпляре RemoteConfig."}
{"request": [{"role": "user", "text": "Получение типизированных данных"}], "response": "Класс RemoteConfig имеет методы получения данных и приведения его к определенным типам.\ngetBoolean(key: String): Boolean\ngetInt(key: String): Int\ngetLong(key: String): Long\ngetString(key: String): String\ngetDouble(key: String): Double\ngetFloat(key: String): Float\nМетоды могут вернуть ошибку RemoteConfigCastException, если тип данных не соответствует выбранному методу или отсутствует значение по передаваемому ключу."}
{"request": [{"role": "user", "text": "Фоновая синхронизация конфигурации"}], "response": "Фоновая синхронизация конфигурации используется при некоторых типах политики обновления.\nРезультатом фоновой синхронизации конфигурации является обновление постоянного хранилища конфигураций актуальными данными для последующего использования в зависимости от выбранной политики обновления.\nМинимальный допустимый интервал между фоновыми синхронизациями составляет 15 минут.\nДля корректной работы фоновой синхронизации, инициализация SDK RemoteConfig должна происходить в методе Application.onCreate()."}
{"request": [{"role": "user", "text": "Ошибки SDK RemoteConfig"}], "response": "Все ошибки SDK RemoteConfig имеют суперкласс RemoteConfigException\nНаследники RemoteConfigException:"}
{"request": [{"role": "user", "text": "Версия SDK 0.0.2"}], "response": "Внутреннее обновление SDK."}
{"request": [{"role": "user", "text": "Условия"}], "response": "Условия определяют, как именно обновится приложение. Например, «‎версия Android старше 11й версии и русский язык на устройстве»‎. Условие можно назвать «‎таргетингом»‎ или «‎сегментом»‎. Само по себе создание условия ни на что не влияет, его нужно применить к раскатываемому параметру. Параметры Remote Config\nУсловия нужны, чтобы применять параметры на определённый сегмент пользователей. Весь список находится в разделе Conditions. Условия также видны в выпадающем списке при настройке параметра.\nНе редактируйте условия без необходимости и уверенности, что это не повлияет на пользователей. Особенно, если на условия раздаются параметры. Это может помешать стабильной работе приложения."}
{"request": [{"role": "user", "text": "Создание нового условия"}], "response": "Для создания нового условия нажмите кнопку «‎Add Condition».\nВ поле «‎Название» укажите название события. В «‎Описании» — поясняющий комментарий.\nВыберите «‎Атомарные условия», из которых состоит условие.\nВсе атомарные условия объединяются по логическому «‎И». Чтобы пользователь попал в созданное условие, он должен попасть под действие всех атомарных условий."}
{"request": [{"role": "user", "text": "Атомарные условия"}], "response": "Атомарные условия могут быть текстовыми и числовыми. Текстовое поле заполняется без кавычек.\nДля текстовых доступны операторы:\nExactly matches. Требует точного соответствия.\nПример. Условию «‎OS Version exactly matches 9.0.0»‎ будет соответствовать запрос от приложения с os_version=9.0.0, но не с os_version=9.0.\nContains. Содержит подстроку.\nDoes not contain. Не содержит подстроку элементов.\nRegexp. Соответствует регулярному выражению.\nПри использовании Regexp для Golang нужно проверять работу условия по ссылке и при тестировании.\nPresented in file. Соответствует элементам из списка в файле. Максимальный размер файла — 5 MB.\nNot presented in file. Под условие попадают все пользователи, которые не указаны в загруженном файле.\nДля числовых доступны операторы:\n=\n!= (не равно)\n=\n<\n<="}
{"request": [{"role": "user", "text": "Параметр Salt"}], "response": "Чтобы пользователь попадал в разные персентили, значения параметра Salt должны отличаться.\nНапример, если вы хотите всегда включать новые фичи на одних и тех же пользователей при публикации на % используйте атомарное условие deviceId percentile.Если нужно, чтобы каждое обновление видели разные пользователи, меняйте значение параметра Salt."}
{"request": [{"role": "user", "text": "Подтверждение создания условий"}], "response": "Если условие создает не владелец приложения или пользователь с правами на подтверждение, то понадобится подтверждение от пользователя с такими правами или владельца приложения. Роли пользователей"}
{"request": [{"role": "user", "text": "Параметры"}], "response": "В RuStore Remote Config заводятся параметры, которые будут регулировать поведение вашего приложения. Их значения могут быть разными в зависимости от того, какое условие выполняется. При интеграции приложения его код должен быть сконфигурирован при помощи SDK так, чтобы в нём были параметры, которые можно было бы менять с помощью конфигурации.\nРедактируйте параметры осторожно, чтобы изменения не повлияли на пользователей и стабильную работу приложения."}
{"request": [{"role": "user", "text": "Создание нового параметра"}], "response": "Нажмите кнопку «‎Создать параметр»‎. Вы увидите экран создания параметра:\nВ поле «‎Ключ параметра» укажите его название. Добавьте комментарий или описание.\nТипы параметров:\nBoolean — True/False.\nNumeric — цифровой.\nString — текстовый (однострочный).\nText — текстовый (многострочный).\nJSON — передача конфига.\nТип значения параметра может быть только один.\nПосле выбора типа параметра, добавьте к нему заранее созданные условия.\nУ каждого параметра может быть множество заданных значений по разным условиям. Расчёт условий происходит в порядке их описания внутри параметра в RuStore Remote Config. Например, если пользователь попал под условие «А», то дальнейшие условия проверяться не будут. Таким образом, различными комбинациями можно создавать условия любой сложности.\nЧтобы перетащить условия, потяните за значок\nПри создании параметра рядом с названием появляется индикатор New, который говорит, что это новый параметр. Такой параметр можно удалять без подтверждения, так как он является черновиком."}
{"request": [{"role": "user", "text": "Применение нового параметра"}], "response": "После подтверждения параметра пользователем, имеющим соответствующие права, параметр начинает действовать. Роли пользователей"}
{"request": [{"role": "user", "text": "Роли и права пользователей"}], "response": "Remote config предоставляет пользователям возможность гибкого управления доступами с использованием механизма выдачи прав. Права выдаются отдельно на каждое приложение."}
{"request": [{"role": "user", "text": "Список прав и их описание"}], "response": "Владелец компании обладает всеми правами во всех приложениях компании."}
{"request": [{"role": "user", "text": "Работа с параметрами и условиями"}], "response": "Remote Config защищает пользователей от непреднамеренных действий с параметрами и условиями, поэтому любое изменение, которое может повлиять на поведение приложения, будет отправлено на подтверждение. Не все изменения требуют подтверждения. Например, изменение описания параметра или условия никак не влияет на поведение системы, поэтому изменения вступают в силу сразу."}
{"request": [{"role": "user", "text": "Права и доступы"}], "response": "Важно сказать, что права для совершения операций изменения подтверждения разделены. Роли пользователей"}
{"request": [{"role": "user", "text": "Работа с условием"}], "response": "При создании, изменении или удалении условия оно переходит в статус Pending, то есть переходит в режим ожидания подтверждения.\nВ зависимости от типа действия, интерфейс будет принимать разный вид."}
{"request": [{"role": "user", "text": "Создание условия"}], "response": "При создании условия рядом с названием появляется индикатор New, который говорит, что это новое условие. Такое условие можно удалять без подтверждения, так как оно является черновиком.\nПри подтверждении создается полноценном условие. Используйте его в параметрах."}
{"request": [{"role": "user", "text": "Изменение условия"}], "response": "Вы можете сравнить старое условие с новым, а также отменить изменения, удалив черновик. Любые параметры будут работать с исходной версией, а не черновиком. При подтверждении все изменения вступают в силу, и пользователь будет получать все связанные параметры уже по новому условию."}
{"request": [{"role": "user", "text": "Удаление условия"}], "response": "При удалении условия рядом с названием появляется индикатор Will be deleted. Подтвердите операцию, если хотите полностью удалить условие из системы."}
{"request": [{"role": "user", "text": "Отклонение изменений"}], "response": "С помощью отклонения изменений вы можете скорректировать условие, если допустили ошибку."}
{"request": [{"role": "user", "text": "Работа с параметром"}], "response": "При создании, изменении или удалении параметра оно переходит в статус Pending, то есть переходит в режим ожидания подтверждения. Но в отличие от условия, параметры можно протестировать перед тем, как подтверждать изменения. Механизм тестирования позволяет применить параметр на конкретное устройство или аккаунт и убедиться в корректности поведения приложения."}
{"request": [{"role": "user", "text": "Создание параметра"}], "response": "При создании параметра рядом с названием появляется индикатор New. Такой параметр можно удалять без подтверждения, так как он является черновиком."}
{"request": [{"role": "user", "text": "Изменение параметра"}], "response": "При изменении параметра можно сравнить старую версию с новой, а также отменить изменения, удалив черновик. Всем пользователям приходит исходный параметр."}
{"request": [{"role": "user", "text": "Удаление параметра"}], "response": "При удалении параметра рядом с названием появляется индикатор Will be deleted."}
{"request": [{"role": "user", "text": "Тестирование параметра"}], "response": "Тестирование помогает избежать применения некорректных значений конфигурации. В основе тестирования лежит применение кастомных атомарные условий на каждую возможную версию параметра.\nПри нажатии на кнопку «Настроить тест» появляется окно вида:\nТабы сверху соответствуют всем добавленным условиям и значению по умолчанию, которые есть в измененном параметре. На скриншоте выше тестируется значение, получаемое по условию «Моё новое условие».\nПри нажатии на кнопку «Запустить тест» параметр переходит в статус Testing, в котором уже появляется возможность подтвердить или отклонить изменения.\nДобавляемые условия полностью заменяют атомарные, приведённые в параметре «Моё новое условие». Это сделано для тестирования сложных сценариев, которые трудно воссоздать на устройстве пользователя. Например, это может быть условие, связанное с версией приложения. Вы можете изменить исходные условия на кастомные и посмотреть, как выглядит интерфейс при выполнении параметра «Моё новое условие». Другими словами, сервис позволяет получить любое значение параметра на устройстве с помощью кастомных условий.\nПервое условие ограничено в выборе допустимых типов и операций. Доступны только типы DeviceID и Account и операция Exactly matches. Такая защита сделана специально, чтобы не выбрать слишком широкий диапазон пользователей для тестирования. Начиная со второго условия таких ограничений нет.\nОбратите внимание, что один и тот же Account или DeviceID применяется только для одного условия или Default value. В противном случае система не будет знать точно, какое именно значение отдавать, поэтому оно может быть произвольным и постоянно меняться.\nПри удалении параметра табы отсутствуют, и выбранные атомарные условия применяются глобально. Так как параметр удаляется, то нам необходимо протестировать его удаления, и в данном случае неважны именно тесты отдельных условий внутри параметр, так как они тоже удалятся вместе с параметром. Пример:"}
{"request": [{"role": "user", "text": "Tracer"}], "response": "Cервис Tracer собирает и анализирует ошибки, а затем отправляет автоматический отчёт о них разработчику. Это позволяет чинить баги быстрее и эффективнее. Сервис работает в мобильных приложениях под iOS и Android.\nС помощью Tracer вы можете:\nпроводить профилирование в продакшене, чтобы определить причины лагов и фризов;\nнаходить причины утечек памяти на устройстве пользователя в автоматическом и полуавтоматическом режиме;\nобнаруживать забытые и утёкшие файлы приложения на диске — так меньше рисков, что в результате очистки данных приложение удалится или пользователь будет разлогинен."}
{"request": [{"role": "user", "text": "Регистрация и настройка"}], "response": "Для начала нужно:\nЗайти в аккаунт Tracer.\nСоздать или вступить в организацию.\nДобавить андроид проект (нужно быть администратором или владельцем организации)."}
{"request": [{"role": "user", "text": "Подключение зависимостей на трейсер к проекту"}], "response": "В вашем <project>/settings.gradle\nВ вашем <project>/<app-module>/build.gradle"}
{"request": [{"role": "user", "text": "Включение плагинов трейсера и их конфигурация в проекте"}], "response": "В вашем Application.kt реализуйте интерфейс HasTracerConfiguration\nПроперти HasTracerConfiguration.tracerConfiguration будет запрошена ровно один раз при старте процесса до вызова Application.onCreate но после Application.attachBaseContext. В геттере уже можно обращаться к контексту приложения, но еще рано обращаться к тому, что проинициализируется в onCreate.\nПодробное описание опций:\nCoreTracerConfiguration — смотрите ниже на этой странице;\nCrashReportConfiguration и CrashFreeConfiguration — на странице «Crash и ANR»;\nHeapDumpConfiguration — на странице «Heap Dumps»;\nDiskUsageConfiguration — на странице «Disk Usage»;\nSystraceProfilerConfiguration — на странице «Systrace Profiler»;\nSamplingProfilerConfiguration — на странице «Sampling Profiler»."}
{"request": [{"role": "user", "text": "Описание CoreTracerConfiguration"}], "response": "В том редком случае, когда вы захотите сконфигурировать ядро трейсера в вашем проекте, нужно вернуть CoreTracerConfiguration из HasTracerConfiguration:\nОпции CoreTracerConfiguration.Builder:\nsetEnabled — не используется и будет удалена в версии 0.3.x, ядро трейсера всегда включено, но не активно пока нет включенных плагинов;\nsetHost, provideHost — изменение адреса трейсера;\nsetStatHost, provideStatHost — изменение адреса трейсера для фичи crash free;\nsetCustomAppKey, provideCustomAppKey — заменяет sampleUploadToken из конфигурации gradle-плагина."}
{"request": [{"role": "user", "text": "Миграция 0.2.7 с 0.2.3"}], "response": "Класс Condition и методы SystraceProfiler.start(context, profileDuration, activeCondition) и SamplingProfiler.run(context, duration, condition) объявлены deprecated и будут вскоре удалены. Вместо них используйте SystraceProfiler и SamplingProfiler API для ручного профилирования.\nВ тех местах, где для профилирования размечались interestingEvents с помощью TracerEvents.addEvent(), теперь стоит вызывать SystraceProfiler.commit() или SamplingProfiler.commit() в зависимости от того, каким типом профилирования пользовались. А в тех метсах, откуда можно было попасть на эти interestingEvents вызывать SystraceProfiler.start() или SamplingProfiler.start() соответственно."}
{"request": [{"role": "user", "text": "Миграция на 0.2.3 с 0.2.2"}], "response": "Метод TracerCrashReport.log(Throwable), служащий для отправки non-fatal, объявлен deprecated и будет вскоре удален. Вместо него используйте метод TracerCrashReport.report(Throwable). Это не касается метода TracerCrashReport.log(String), служащего для добавления логов к событиям crash и non-fatal, он продолжит работать без изменений. Актуальные примеры использования на странице «Crash и ANR».\nНачиная с версии 0.2.3 изменяется способ подключения tracer-plugin. Зависимость заменяется с ru.ok.tracer:plugin:0.1.1 на ru.ok.tracer:tracer-plugin:0.2.3 (обратите внимание, изменена не только версия). Plugin id меняется с ru.ok.tracer.mapping_plugin на ru.ok.tracer. В дальнейшем версии плагина и runtime-зависимостей будут совпадать, публиковаться они будут вместе. Актуальная информация на странице «Быстрый старт»."}
{"request": [{"role": "user", "text": "Миграция на 0.2.2 c 0.1.15"}], "response": "Методы Tracer.configure и Tracer.configureAsync. Вместо их вызовов следует реализовать интерфейс HasTracerConfiguration в вашем классе Application и вернуть то, что раньше передавалось в Tracer.configure. Актуальное описание на странице «Быстрый старт».\nТеперь конфигурация трейсера происходит в момент запуска а не на следующий запуск."}
{"request": [{"role": "user", "text": "Подключение зависимостей к проекту"}], "response": "В вашем <project>/<app-module>/build.gradle\nТакже Tracer поддерживает сбор и анализ нативных крэшей. Если вы хотите собирать крэши случившиеся в нативном коде, нужно подключить соответствующую зависимость:\nНа данный момент эта фича находится в активной разработке. Сбор уже работает, однако отображаются все нативные крэши пока без стэктрейса и прочих подробностей. Собрать и подсчитать их можно уже сейчас, а отображение и классификация дорабатываются.\nБолее подробное описание зависимостей — на странице «Быстрый старт»."}
{"request": [{"role": "user", "text": "Описание CrashReportConfiguration и CrashFreeConfiguration"}], "response": "В вашем Application.kt\nОпции CrashReportConfiguration.Builder:\nsetEnabled — включает/выключает репортинг крэшей. По умолчанию включена, можно не трогать ))\nsetSendAnr — отключает отправку ANR. По умолчанию включена\nsetNativeEnabled — включает/выключает репортинг нативных крэшей. Значение по умолчанию зависит от того, подключена ли зависимость tracer-crash-report-native. Если подключена, то и репортинг по умолчанию включен. Если не подключена - выключен. ⚠ Включить репортинг нативных крэшей без подключения соответствующей зависимости не выйдет, а вот выключить репортинг при наличии зависимости - пожалуйста.\nОпции CrashFreeConfiguration.Builder:\nsetEnabled — включает/выключает подсчет crash free users. По умолчанию выключена!\nУстаревшие или опасные опции CrashReportConfiguration.Builder:\nsetHost — устарела и будет удалена в версии 0.3.x. Если вам точно действительно надо поменять хост, используйте CoreTracerConfiguration.setHost\nsetSendLogs — устарела и ничего не делает, будет удалена в версии 0.3.x\nsetCountCrashFreeUsers — устарела и ничего не делает, будет удалена в версии 0.3.x. Вместо нее предоставлена опция CrashFreeConfiguration.Builder.setEnabled\nsetSendThreadsDump, setSendAsap, setMaxNonFatalExceptions — устарели и ничего не делают, будут удалены в версии 0.3.x\nУстаревшие или опасные опции CrashFreeConfiguration.Builder:\nsetExperimentalMaxSessionsToUpload — сколько сессий нужно накопить чтобы отправить батч. По умолчанию 10. Только для тестов!\nsetExperimentalMaxSessionTimeSpanToUpload — как долго копить сессии чтобы отправить батч. По умолчанию 4 часа (в миллисекундах). Только для тестов!\nsetExperimentalUploadSessionsFromYesterday — отправлять батч если обнаружены вчерашние (или ранее) сессии. По умолчанию включена"}
{"request": [{"role": "user", "text": "Описание TracerCrashReport"}], "response": "Для отправки non-fatals используется метод TracerCrashReport.report(throwable)\nКрэши всегда группируются по общим частям стектрейса. По умолчанию non-fatals тоже, однако есть способ повлиять на эту группировку.\nДля того, чтобы все non-fatals попали в одну группу вне зависимости от стектрейса, есть метод report с параметром issueKey.\nНа текущий момент в Tracer есть лимит в 1 млн событий в день. Поэтому рекомендуется не злоупотреблять этим методом.\nТакже к событию можно добавить дополнительную информацию."}
{"request": [{"role": "user", "text": "Подключение зависимостей к проекту"}], "response": "В вашем <project>/<app-module>/build.gradle\nБолее подробное описание зависимостей на странице «Быстрый старт»."}
{"request": [{"role": "user", "text": "Описание HeapDumpConfiguration"}], "response": "В вашем Application.kt\nОпции HeapDumpConfiguration.Builder:\nsetEnabled — включает/выключает сбор хипдампов при OOM. По умолчанию включён.\nУстаревшие или опасные опции HeapDumpConfiguration.Builder:\nsetProbability — устарела и ничего не делает, будет удалена в версии 0.3.x\nsetInterestingSize — устарела и ничего не делает, будет удалена в версии 0.3.x\nХипдампы отправляются ночью, когда пользователь не пользуется устройством."}
{"request": [{"role": "user", "text": "Подключение зависимостей к проекту"}], "response": "В вашем <project>/<app-module>/build.gradle\nБолее подробное описание зависимостей на странице «Быстрый старт»."}
{"request": [{"role": "user", "text": "Описание DiskUsageConfiguration"}], "response": "В вашем Application.kt\nОпции DiskUsageConfiguration.Builder:\nsetEnabled — включить/выключить плагин. По умолчанию включён;\nsetProbability — вероятность(1/n) того, что раз в день у этого юзера в фоне будет произведена проверка использования дискового места. По умолчанию 0, что равноценно включению плагина;\nsetInterestingSize — лимит занимаемого места, при превышении которого сдк будет сигнализировать о проблеме и отправлять отчет в Tracer. Измеряется в байтах. По умолчанию 10Gb;\nsetExcludePath — пути с заранее известными большими файлами которые должны быть исключены из проверки. Принимает только пути сформированные через GlobalDirs.\nОписание GlobalDirs:\nGlobalDirs.INTERNAL_DATA.excludePath(\"foo/bar\") — внутреннее хранилище приложения;\nGlobalDirs.EXTERNAL_DATA.excludePath(\"foo/bar\") — файлы приложения на SD-карте;\nGlobalDirs.SRC.excludePath(\"foo/bar\") — файлы самого приложения."}
{"request": [{"role": "user", "text": "Подключение зависимостей к проекту"}], "response": "В вашем <project>/<app-module>/build.gradle\nБолее подробное описание зависимостей на странице «Быстрый старт»."}
{"request": [{"role": "user", "text": "Описание SystraceProfilerConfiguration"}], "response": "В вашем Application.kt\nОпции SystraceProfilerConfiguration.Builder:\nsetEnabled — включает/выключает профилирование. По умолчанию включён.\nУстаревшие или опасные опции SystraceProfilerConfiguration.Builder:\nsetDurationMs — время работы профайлера в ms;\naddCondition — добавляет Condition для начала профилирования."}
{"request": [{"role": "user", "text": "Описание Condition, TracerEvents, SystraceProfiler API, etc."}], "response": "Актуальное описание в разделе «Sampling Profiler»."}
{"request": [{"role": "user", "text": "Подключение зависимостей к проекту"}], "response": "В вашем <project>/<app-module>/build.gradle\nБолее подробное описание зависимостей на странице «Быстрый старт»."}
{"request": [{"role": "user", "text": "Описание SamplingProfilerConfiguration"}], "response": "В вашем Application.kt\nОпции SamplingProfilerConfiguration.Builder:\nsetEnabled — включает/выключает профилирование. По умолчанию включён.\nУстаревшие или опасные опции SamplingProfilerConfiguration.Builder:\nsetBufferSizeMb — смотрите описание android.os.Debug.startMethodTracingSampling;\nsetSamplingIntervalUs — смотрите описание android.os.Debug.startMethodTracingSampling. По умолчанию 5000;\nsetDurationMs — время работы профайлера в ms;\naddCondition — добавляет Condition для начала профилирования."}
{"request": [{"role": "user", "text": "Описание Condition. Deprecated."}], "response": "Конструкция Condition используется для управления запуском и отправкой результатов профилирования. Пример использования:\nВключить профайлер при старте приложения с вероятностью 100% и отправить результат его работы на сервер, если время запуска приложения превысило 7000 мс.\nСоздание собственного события:\nОпции Condition.Builder\nsetTag(\"my_tag\") — Тег, с которым результат будет загружен в Tracer.\nsetTagLimit(n) — Максимальное количество отчетов в день для данного тега которое примет сервер.\nsetProbability(n) — Вероятность(1/n) с которой будет запущен профайлер при наступлении события из startEvent.\nsetStartEvent(\"my_event\") — При наступлении этого события с указанной выше вероятностью будет запущен профайлер.\nsetInterestingEvent(\"my_other_event\") — Опционально. Если присутствует, то результат профилирования будет отправлен на бекенд, только если данное событие встретилось за время работы профайлера.\nsetInterestingDuration(n) — Если время между стартовым и интересующим событием превысит это число, результат профилирования будет отправлен на бекенд.\nЕсли интересующее событие будет иметь свой счётчик, сравнение будет происходить с ним. К примеру, app_freeze имеет счетчик — время которое UI поток висел. Следовательно, если interestingEvent == \"app_freeze\" и interestingDuration == 700, то отправка произойдет, если во время работы профайлера случился фриз на 700+ мс."}
{"request": [{"role": "user", "text": "Ручное профилирование"}], "response": "Также есть возможность размечать в коде начало и конец профилирования.\nSamplingProfiler.start() — Запускает профайлер. Принимает параметры:\ncontext: Context — App context приложения.\ntag: String — Тег, с которым результат будет загружен в трейсер.\nduration: Long — Время работы профайлера в ms.\nSamplingProfiler.abort() — Прекращает работу профайлера и очищает результат.\nSamplingProfiler.commit() — Прекращает работу профайлера и отпавляет результат на бэкенд. Если на момент вызова профайлер ещё не закончил работу, то результирующий тег будет равен <tag>_<tagSuffix>\ntagSuffix: String — Опционально. Суффикс, который будет добавлен к тегу в случае досрочной остановки профайлера.\nПример:\nС вероятностью 1/100000 профайлер начнёт свою работу"}
{"request": [{"role": "user", "text": "Описание «системных» событий"}], "response": "«Системные» события используются в классе Condition и ручном профилировании:\nTracerEvents.EVENT_APP_START_BEGIN — \"app_start_begin\" — Начало работы приложения.\nTracerEvents.EVENT_APP_START_END — \"app_start_end\" — Окончание работы метода Application.onCreate().\nTracerEvents.EVENT_FIRST_ACTIVITY_CREATED — \"app_first_activity_created\" — Создана первая активити.\nTracerEvents.EVENT_ACTIVITY_CREATED — \"activity_created\" — Любая активити перешла в состояние created.\nTracerEvents.EVENT_FREEZE — \"app_freeze\" — UI поток завис на N мс. Если данный эвент используется как interesting event, тогда interesting duration будет сравниваться с N. К примеру, если N == 500, тогда результат профайлинга будет отправлен, если UI поток за время работы профайлера зависал на более чем 500 мс.\nEVENT_ANR — \"app_anr\" — UI поток завис и не продолжил свою работу на момент окончания профайлера. Прошло N мс с момента обнаружения зависания до окончания работы профайлера. Если данный эвент используется как interesting event, тогда interesting duration будет сравниваться с N. К примеру, если N == 5000, тогда результат профайлинга будет отправлен, если UI поток за время работы профайлера завис на более чем 5000 мс.\nЧтобы добавить пользовательское событие:\neventName — имя события. Используется в классе Condition в методах startEvent и interestingEvent.\nduration — время ассоциированное с этим событием. Если задано, то interestingDuration будет вычисляться не как разница между startEvent и interestingEvent, а сравниваться с duration этого события."}
{"request": [{"role": "user", "text": "Описание HasTracerSystemInfo"}], "response": "Самую важную информацию о сбое предоставляет tracer sdk и вам не надо об этом беспокоиться:\ndate — дата и время наступления события;\nboard — Build.BOARD;\nbrand — Build.BRAND;\ncpuABI — Build.SUPPORTED_ABIS;\ndevice — Build.DEVICE;\ndisplay — Build.DISPLAY;\nmanufacturer — Build.MANUFACTURER;\nmodel — Build.MODEL;\nosVersionSdkInt — Build.VERSION.SDK_INT;\nosVersionRelease — Build.VERSION.RELEASE;\ncpuCount — Runtime.getRuntime().availableProcessors();\noperatorName — имя оператора (если доступно).\nДобавить дополнительную информации к сбою можно в реализации HasTracerSystemInfo в своем приложении:\nПолезным примером такой информации может быть userId, build flavor или vendor если сборка предназначена для предустановки.\nHasTracerSystemInfo.tracerSystemInfo запрашивается каждый раз при наступлении события CRASH и NON-FATAL. Также он будет вызван 1 раз на старте приложения на случай наступления ANR."}
{"request": [{"role": "user", "text": "Описание TracerCrashReport.log"}], "response": "К событию также прилагаются логи, предшествующие его наступлению. Вы можете добавить логи воспользовавшись методом TracerCrasgReport.log:\nЛоги накапливаются не бесконечно. На данный момент они собираются в циклический буффер размером 64Кб."}
{"request": [{"role": "user", "text": "Собственное логирование Tracer"}], "response": "Информация касается собственного логирования Tracer SDK. Никакого отношения к тому, что SDK отправляет на сервер она не имеет. Собственное логирование служит только для самого Tracer SDK и/или его интеграции в ваш проект."}
{"request": [{"role": "user", "text": "Описание HasTracerLogger и TracerLoggerDelegate"}], "response": "Трейсер осуществляет все внутреннее логирование через интерфейс TracerLoggerDelegate. Для того, чтобы подменить мезанизм логирования, реализуйте HasTracerLogger в вашем приложении.\nВ том случае, если вы хотите всего лишь поменять уровень логирования, можно создать экземпляр DefaultTracerLoggerDelegate:\nПолностью переопределить механизм логирования можно в своей реализации TracerLoggerDelegate:"}
{"request": [{"role": "user", "text": "Статистика для разработчиков"}], "response": "В RuStore Консоль есть несколько разделов статистики, в которых можно просмотреть следующие данные:\nколичество просмотров и скачиваний приложения;\nсумма полученной прибыли и возвратов;\nколичество push-уведомлений, отправленных пользователю и т. д.\nДанная статистика позволит собрать нужные данные, чтобы повысить функциональность приложения и сделать его более удобным для пользователя, оценить динамику продаж и, при необходимости, изменить стратегию монетизации вашего приложения."}
{"request": [{"role": "user", "text": "Статистика загрузки версий"}], "response": "В RuStore Консоль реализована возможность просмотра статистики по приложениям.\nПросмотр статистики доступен только авторизованным пользователям.\nКак просмотреть статистику загрузки версий?\nОткройте RuStore Консоль.\nПерейдите на вкладку «Приложения».\nВ боковом меню нажмите «Статистика по приложениям».\nНа вкладке статистики отображены следующие элементы:\nТаблица с общей статистикой по приложению, содержащая:\nОбщее количество просмотров приложения в интерфейсе RuStore (Web и МП);\nОбщее количество скачиваний приложения в интерфейсе RuStore;\nТаблица со статистикой по версиям операционной системы (далее ОС) пользователей RuStore, содержащая:\nНазвание версии ОС пользователя RuStore;\nКоличество скачиваний приложения на устройство с определенной версией ОС;\nПроцент скачиваний приложения на устройство с определенной версией ОС;\nТаблица со статистикой по моделям устройств пользователей RuStore, содержащая:\nНазвание модели устройства пользователя RuStore;\nКоличество скачиваний приложения на ту или иную модель устройства;\nПроцент скачиваний приложения на ту или иную модель устройства;\nПри необходимости можно отсортировать элементы таблиц со статистикой по версиям операционной системы и по моделям устройств, а именно:\nНажмите на иконку сортировки один раз – все элементы таблицы будут отсортированы от большего к меньшему значению этого параметра;\nНажмите на иконку сортировки два раза – все элементы таблицы будут отсортированы от меньшего к большему значению этого параметра;\nНажмите на иконку сортировки три раза – список элементов вернется к состоянию по умолчанию.\nДля удобства сортировки одновременно можно использовать несколько фильтров."}
{"request": [{"role": "user", "text": "Статистика по монетизации"}], "response": "В RuStore Консоли можно просматривать финансовые данные, что позволяет вам оценить динамику продаж, в то числе конкретного контента или подписок. Данные о доходах основаны на сведениях об объемах транзакций.\nОбщие требования\nДля просмотра статистики по монетизации необходимо соблюдение следующих условий:\nдля приложения подключен один из видов монетизации и ранее были совершены транзакции. Подробнее в разделе Монетизация.\nу пользователя есть права на просмотр статистики;\nпользователь должен быть авторизован в RuStore Консоль.\nКак просмотреть статистику по платежам?\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Монетизация → Статистика по платежам».\nНа странице «Статистика по платежам» данные отображаютсяпо совокупному доходу из всех источников и по возвратам из всех источников.\nПод источниками подразумевается тип продукта монетизации, подключенный к приложению:\nПлатные приложения: доход от платной загрузки приложения из витрины RuStore;\ninn-app продукты: доход от транзакций с inn-app продуктами в приложении;\nПодписки: доход от регулярных платежей за использование подписки.\nДля статистики по возвратам и доходам отображается следующий тип данных:\nСумма, с указанием валюты;\nКоличество транзакций;\nПроцент от дохода.\nВыводится в случае, если компания подключила более одного типа продукта (например, подписки + inn_app платежи)\nПроцент возврата\nПериод —отрезок времени, за который можно посмотреть статистику. Доступные значения:\nПоследние сутки с 00:00 до 00:00;\nПоследние 7 дней до текущего дня включительно;\nПоследние 30 дней до текущего дня включительно;\nВсе время = с момента получения первой транзакции до текущего дня включительно.\nОтчет формируется на момент окончания выбранного периода."}
{"request": [{"role": "user", "text": "Статистика push-уведомлений"}], "response": "В RuStore Консоль можно просматриватьстатистику по push-уведомлениям для опубликованных приложений.\nСтатистика рассчитывается на основании данных для каждого приложения, в котором настроены push-уведомления.\nКак просмотреть статистику по push-уведомлениям?\nОткройте RuStore Консоль.\nВыберите «Приложения» в верхнем меню.\nПерейдите на вкладку «Push-уведомления → Статистика по push-уведомлениям».\nДанные статистики по push-уведомлениям отображаются через день после публикации новой версии приложения.\nНа странице статистики по push-уведомлениям отображается количество:\nвсех отправленных push-уведомлений;\nдоставленных push-уведомлений;\nпользователей, которые перешли в приложение, кликнув на push-уведомление.\nЭти данные собраны для просмотра по периодам времени: за день, за неделю, за месяц или за все время."}
{"request": [{"role": "user", "text": "Проверка подписи APK"}], "response": "Для работы большинства SDK необходимо, чтобы приложение было подписано правильной подписью. Чтобы узнать, какой подписью подписан файл APK, нужно воспользоваться дополнительными инструментами, которые покажут отпечаток подписи.\nИнформация о подписи указана в файле build.gradle. Если не указать подпись явно, используется подпись по умолчанию ~/.android/debug.keystore.\nНиже рассмотрены способы, с помощью которых можно узнать подпись."}
{"request": [{"role": "user", "text": "Получение подписи с помощью Android Studio"}], "response": "Результат выполнения команды:\nОтпечаток подписи указан в строке SHA-256."}
{"request": [{"role": "user", "text": "Получение подписи с помощью apksigner"}], "response": "example.apk — ваше приложение.\nРезультат выполнения команды Mac OS:\nЗначение Signer #1 certificate SHA-256 digest — это нужный отпечаток подписи."}
{"request": [{"role": "user", "text": "Получение подписи с помощью keytool"}], "response": "example.apk — ваше приложение.\nРезультат выполнения команды Mac OS:\nОтпечаток подписи указан в строке SHA256."}
{"request": [{"role": "user", "text": "Проверка для пуш-уведомлений"}], "response": "Отпечаток подписи, полученный с помощью указанных инструментов, должен совпадать с отпечатком, который указан в проекте пуш-уведомлений — поле «Отпечаток подписи SHA-256».\nПодробная информация о подписи — в официальной документации Google."}
